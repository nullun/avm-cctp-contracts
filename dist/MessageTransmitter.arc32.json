{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "_checkOwner()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pendingOwner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership2S(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptOwnership()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauser()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePauser(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "enableAttester(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "offsetOfEnabledAttester(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNumEnabledAttesters()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAttesterManager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "disableAttester(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSignatureThreshold(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendMessage(uint32,byte[32],byte[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "replaceMessage(byte[],byte[],byte[],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendMessageWithCaller(uint32,byte[32],byte[32],byte[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveMessage(pay,byte[],byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setMaxMessageBodySize(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(uint32,uint64,uint32)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pendingOwner": {
          "type": "bytes",
          "key": "_pendingOwner"
        },
        "_pauser": {
          "type": "bytes",
          "key": "_pauser"
        },
        "paused": {
          "type": "bytes",
          "key": "paused"
        },
        "signatureThreshold": {
          "type": "uint64",
          "key": "signatureThreshold"
        },
        "attesterManager": {
          "type": "bytes",
          "key": "attesterManager"
        },
        "localDomain": {
          "type": "bytes",
          "key": "localDomain"
        },
        "version": {
          "type": "bytes",
          "key": "version"
        },
        "maxMessageBodySize": {
          "type": "uint64",
          "key": "maxMessageBodySize"
        },
        "nextAvailableNonce": {
          "type": "uint64",
          "key": "nextAvailableNonce"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 7,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "MessageTransmitter",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "desc": "@devReturns the address of the current owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "_checkOwner",
        "desc": "@devThrows if the sender is not the owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "@devTransfers ownership of the application to a new account (`newOwner`).Can only be called by the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pendingOwner",
        "desc": "@devReturns the address of the pending owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership2S",
        "desc": "@devStarts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.Can only be called by the current owner.FIX: Once overrides exist, rename to transferOwnership",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "OwnershipTransferStarted",
            "args": [
              {
                "name": "previousAddress",
                "type": "address"
              },
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "acceptOwnership",
        "desc": "@devThe new owner accepts the ownership transfer.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pauser",
        "desc": "@noticeReturns current pauser@returnPauser's address",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "pause",
        "desc": "@devcalled by the owner to pause, triggers stopped state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Pause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "unpause",
        "desc": "@devcalled by the owner to unpause, returns to normal state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Unpause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "updatePauser",
        "desc": "@devupdate the pauser role",
        "args": [
          {
            "name": "_newPauser",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PauserChanged",
            "args": [
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "enableAttester",
        "desc": "@noticeEnables an attester@devOnly callable by attesterManager. New attester must not be attesters.",
        "args": [
          {
            "name": "newAttester",
            "type": "byte[32]",
            "desc": "attester to enable"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "offsetOfEnabledAttester",
        "desc": "@noticereturns the index of a given`attester`, else fails",
        "args": [
          {
            "name": "attester",
            "type": "byte[32]",
            "desc": "attester to retrieve index of@returnindex of given`attester`, else fails"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getNumEnabledAttesters",
        "desc": "@noticereturns the number of enabled attesters@returnnumber of enabled attesters",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "updateAttesterManager",
        "desc": "FIX: onlyOwner or onlyAttesterManager?@devAllows the current attester manager to transfer control of the application to a newAttesterManager.",
        "args": [
          {
            "name": "newAttesterManager",
            "type": "address",
            "desc": "The address to update attester manager to."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "AttesterManagerUpdated",
            "args": [
              {
                "name": "previousAttesterManager",
                "type": "address"
              },
              {
                "name": "newAttesterManager",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "disableAttester",
        "desc": "@noticeDisables an attester@devOnly callable by attesterManager. Disabling the attester is not allowed if there is only one attesterenabled, or if it would cause the number of enabled attesters to become less than signatureThreshold.(Attester must be currently enabled.)",
        "args": [
          {
            "name": "attester",
            "type": "byte[32]",
            "desc": "attester to disable"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setSignatureThreshold",
        "desc": "@noticeSets the threshold of signatures required to attest to a message.(This is the m in m/n multisig.)@devnew signature threshold must be nonzero, and must not exceed numberof enabled attesters.",
        "args": [
          {
            "name": "newSignatureThreshold",
            "type": "uint64",
            "desc": "new signature threshold"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SignatureThresholdUpdated",
            "args": [
              {
                "name": "oldSignatureThreshold",
                "type": "uint64"
              },
              {
                "name": "newSignatureThreshold",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "sendMessage",
        "desc": "@noticeSend the message to the destination domain and recipient@devIncrement nonce, format the message, and emit`MessageSent`event with message information.",
        "args": [
          {
            "name": "destinationDomain",
            "type": "uint32",
            "desc": "Domain of destination chain"
          },
          {
            "name": "recipient",
            "type": "byte[32]",
            "desc": "Address of message recipient on destination chain as bytes32"
          },
          {
            "name": "messageBody",
            "type": "byte[]",
            "desc": "Raw bytes content of message@returnnonce reserved by message"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "replaceMessage",
        "desc": "@noticeReplace a message with a new message body and/or destination caller.@devThe`originalAttestation`must be a valid attestation of`originalMessage`.Reverts if msg.sender does not match sender of original message, or if the source domain of the original messagedoes not match this MessageTransmitter's local domain.",
        "args": [
          {
            "name": "originalMessage",
            "type": "byte[]",
            "desc": "original message to replace"
          },
          {
            "name": "originalAttestation",
            "type": "byte[]",
            "desc": "attestation of`originalMessage`"
          },
          {
            "name": "newMessageBody",
            "type": "byte[]",
            "desc": "new message body of replaced message"
          },
          {
            "name": "newDestinationCaller",
            "type": "byte[32]",
            "desc": "the new destination caller, which may be thesame as the original destination caller, a new destination caller, or an emptydestination caller (bytes32(0), indicating that any destination caller is valid.)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendMessageWithCaller",
        "desc": "@noticeSend the message to the destination domain and recipient, for a specified`destinationCaller`on thedestination domain.@devIncrement nonce, format the message, and emit`MessageSent`event with message information.WARNING: if the`destinationCaller`does not represent a valid address, then it will not be possibleto broadcast the message on the destination domain. This is an advanced feature, and the standardsendMessage() should be preferred for use cases where a specific destination caller is not required.",
        "args": [
          {
            "name": "destinationDomain",
            "type": "uint32",
            "desc": "Domain of destination chain"
          },
          {
            "name": "recipient",
            "type": "byte[32]",
            "desc": "Address of message recipient on destination domain as bytes32"
          },
          {
            "name": "destinationCaller",
            "type": "byte[32]",
            "desc": "caller on the destination domain, as bytes32"
          },
          {
            "name": "messageBody",
            "type": "byte[]",
            "desc": "Raw bytes content of message@returnnonce reserved by message"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "receiveMessage",
        "desc": "@noticeReceive a message. Messages with a given noncecan only be broadcast once for a (sourceDomain, destinationDomain)pair. The message body of a valid message is passed to thespecified recipient for further processing.@devAttestation format:A valid attestation is the concatenated 65-byte signature(s) of exactly`thresholdSignature`signatures, in increasing order of attester address.***If the attester addresses recovered from signatures are not inincreasing order, signature verification will fail.***If incorrect number of signatures or duplicate signatures are supplied,signature verification will fail.Message format:Field                 Bytes      Type       Indexversion               4          uint32     0sourceDomain          4          uint32     4destinationDomain     4          uint32     8nonce                 8          uint64     12sender                32         bytes32    20recipient             32         bytes32    52destinationCaller     32         bytes32    84messageBody           dynamic    bytes      116",
        "args": [
          {
            "name": "fee",
            "type": "pay"
          },
          {
            "name": "message",
            "type": "byte[]",
            "desc": "Message bytes"
          },
          {
            "name": "attestation",
            "type": "byte[]",
            "desc": "Concatenated 65-byte signature(s) of`message`, in increasing orderof the attester address recovered from signatures.@returnsuccess bool, true if successful"
          }
        ],
        "returns": {
          "type": "bool"
        },
        "events": [
          {
            "name": "MessageReceived",
            "args": [
              {
                "name": "caller",
                "type": "address"
              },
              {
                "name": "sourceDomain",
                "type": "uint32"
              },
              {
                "name": "nonce",
                "type": "uint64"
              },
              {
                "name": "sender",
                "type": "byte[32]"
              },
              {
                "name": "messageBody",
                "type": "byte[]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setMaxMessageBodySize",
        "desc": "@noticeSets the max message body size@devThis value should not be reduced without good reason,to avoid impacting users who rely on large messages.",
        "args": [
          {
            "name": "newMaxMessageBodySize",
            "type": "uint64",
            "desc": "new max message body size, in bytes"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "MaxMessageBodySizeUpdated",
            "args": [
              {
                "name": "newMaxMessageBodySize",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deploy",
        "args": [
          {
            "name": "_localDomain",
            "type": "uint32"
          },
          {
            "name": "_maxMessageBodySize",
            "type": "uint64"
          },
          {
            "name": "_version",
            "type": "uint32"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "oldAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "OwnershipTransferStarted",
        "args": [
          {
            "name": "previousAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Pause",
        "args": [],
        "desc": ""
      },
      {
        "name": "Unpause",
        "args": [],
        "desc": ""
      },
      {
        "name": "PauserChanged",
        "args": [
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "AttesterManagerUpdated",
        "args": [
          {
            "name": "previousAttesterManager",
            "type": "address"
          },
          {
            "name": "newAttesterManager",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "SignatureThresholdUpdated",
        "args": [
          {
            "name": "oldSignatureThreshold",
            "type": "uint64"
          },
          {
            "name": "newSignatureThreshold",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "MessageSent",
        "args": [
          {
            "name": "message",
            "type": "byte[]"
          }
        ],
        "desc": ""
      },
      {
        "name": "MessageReceived",
        "args": [
          {
            "name": "caller",
            "type": "address"
          },
          {
            "name": "sourceDomain",
            "type": "uint32"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "sender",
            "type": "byte[32]"
          },
          {
            "name": "messageBody",
            "type": "byte[]"
          }
        ],
        "desc": ""
      },
      {
        "name": "MaxMessageBodySizeUpdated",
        "args": [
          {
            "name": "newMaxMessageBodySize",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}