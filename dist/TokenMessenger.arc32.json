{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "_checkOwner()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pendingOwner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership2S(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptOwnership()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "depositForBurn(axfer,uint32,byte[32],asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "depositForBurnWithCaller(axfer,uint32,byte[32],asset,byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "replaceDepositForBurn(byte[],byte[],byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "handleReceiveMessage(uint32,byte[32],byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRemoteTokenMessenger(uint32,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRemoteTokenMessenger(uint32)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLocalMinter(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLocalMinter()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(application,uint32)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pendingOwner": {
          "type": "bytes",
          "key": "_pendingOwner"
        },
        "localMessageTransmitter": {
          "type": "uint64",
          "key": "localMessageTransmitter"
        },
        "messageBodyVersion": {
          "type": "bytes",
          "key": "messageBodyVersion"
        },
        "localMinter": {
          "type": "uint64",
          "key": "localMinter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjc5LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBvbmx5T3duZXIoKTogdm9pZAovLwovLyBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCm9ubHlPd25lcjoKCXByb3RvIDAgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NTIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuX293bmVyLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gb3duZXIoKWFkZHJlc3MKYWJpX3JvdXRlX293bmVyOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIG93bmVyKClhZGRyZXNzCgljYWxsc3ViIG93bmVyCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gb3duZXIoKTogQWRkcmVzcwovLwovLyBAZGV2IFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuCm93bmVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo2MgoJLy8gcmV0dXJuIHRoaXMuX293bmVyLnZhbHVlOwoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKLy8gX2NoZWNrT3duZXIoKXZvaWQKYWJpX3JvdXRlX19jaGVja093bmVyOgoJLy8gZXhlY3V0ZSBfY2hlY2tPd25lcigpdm9pZAoJY2FsbHN1YiBfY2hlY2tPd25lcgoJaW50IDEKCXJldHVybgoKLy8gX2NoZWNrT3duZXIoKTogdm9pZAovLwovLyBAZGV2IFRocm93cyBpZiB0aGUgc2VuZGVyIGlzIG5vdCB0aGUgb3duZXIuCl9jaGVja093bmVyOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo3MAoJLy8gYXNzZXJ0KHRoaXMub3duZXIoKSA9PSB0aGlzLnR4bi5zZW5kZXIpCgljYWxsc3ViIG93bmVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfdHJhbnNmZXJPd25lcnNoaXA6CgkvLyBuZXdPd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyl2b2lkCgljYWxsc3ViIHRyYW5zZmVyT3duZXJzaGlwCglpbnQgMQoJcmV0dXJuCgovLyB0cmFuc2Zlck93bmVyc2hpcChuZXdPd25lcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQGRldiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4KLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLgp0cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6ODAKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo4MgoJLy8gYXNzZXJ0KG5ld093bmVyICE9IGdsb2JhbHMuemVyb0FkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gbmV3T3duZXI6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCWFzc2VydAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6ODQKCS8vIHRoaXMuX3RyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyKQoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCgljYWxsc3ViIF90cmFuc2Zlck93bmVyc2hpcAoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIEBkZXYgVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuCi8vIEludGVybmFsIGZ1bmN0aW9uIHdpdGhvdXQgYWNjZXNzIHJlc3RyaWN0aW9uLgpfdHJhbnNmZXJPd25lcnNoaXA6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6OTQKCS8vIG9sZE93bmVyOiBBZGRyZXNzID0gdGhpcy5fb3duZXIuZXhpc3RzID8gdGhpcy5fb3duZXIudmFsdWUgOiBnbG9iYWxzLnplcm9BZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglieiB0ZXJuYXJ5MV9mYWxzZQoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCWIgdGVybmFyeTFfZW5kCgp0ZXJuYXJ5MV9mYWxzZToKCWdsb2JhbCBaZXJvQWRkcmVzcwoKdGVybmFyeTFfZW5kOgoJZnJhbWVfYnVyeSAwIC8vIG9sZE93bmVyOiBBZGRyZXNzCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo5NQoJLy8gdGhpcy5fb3duZXIudmFsdWUgPSBuZXdPd25lcgoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6OTcKCS8vIHRoaXMuT3duZXJzaGlwVHJhbnNmZXJyZWQubG9nKHsgb2xkQWRkcmVzczogb2xkT3duZXIsIG5ld0FkZHJlc3M6IG5ld093bmVyIH0pCglieXRlIDB4OWEyMjNlZmIgLy8gT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKQoJZnJhbWVfZGlnIDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBwZW5kaW5nT3duZXIoKWFkZHJlc3MKYWJpX3JvdXRlX3BlbmRpbmdPd25lcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBwZW5kaW5nT3duZXIoKWFkZHJlc3MKCWNhbGxzdWIgcGVuZGluZ093bmVyCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gcGVuZGluZ093bmVyKCk6IEFkZHJlc3MKLy8KLy8gQGRldiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBwZW5kaW5nIG93bmVyLgpwZW5kaW5nT3duZXI6Cglwcm90byAwIDEKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6NTEKCS8vIHJldHVybiB0aGlzLl9wZW5kaW5nT3duZXIudmFsdWU7CglieXRlIDB4NWY3MDY1NmU2NDY5NmU2NzRmNzc2ZTY1NzIgLy8gIl9wZW5kaW5nT3duZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyB0cmFuc2Zlck93bmVyc2hpcDJTKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfdHJhbnNmZXJPd25lcnNoaXAyUzoKCS8vIG5ld093bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB0cmFuc2Zlck93bmVyc2hpcDJTKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiB0cmFuc2Zlck93bmVyc2hpcDJTCglpbnQgMQoJcmV0dXJuCgovLyB0cmFuc2Zlck93bmVyc2hpcDJTKG5ld093bmVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBAZGV2IFN0YXJ0cyB0aGUgb3duZXJzaGlwIHRyYW5zZmVyIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50LiBSZXBsYWNlcyB0aGUgcGVuZGluZyB0cmFuc2ZlciBpZiB0aGVyZSBpcyBvbmUuCi8vIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4KLy8gRklYOiBPbmNlIG92ZXJyaWRlcyBleGlzdCwgcmVuYW1lIHRvIHRyYW5zZmVyT3duZXJzaGlwCnRyYW5zZmVyT3duZXJzaGlwMlM6Cglwcm90byAxIDAKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6NjIKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjY0CgkvLyB0aGlzLl9wZW5kaW5nT3duZXIudmFsdWUgPSBuZXdPd25lcgoJYnl0ZSAweDVmNzA2NTZlNjQ2OTZlNjc0Zjc3NmU2NTcyIC8vICJfcGVuZGluZ093bmVyIgoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo2NgoJLy8gdGhpcy5Pd25lcnNoaXBUcmFuc2ZlclN0YXJ0ZWQubG9nKHsKCS8vICAgICAgICAgICAgIHByZXZpb3VzQWRkcmVzczogdGhpcy5fb3duZXIudmFsdWUsCgkvLyAgICAgICAgICAgICBuZXdBZGRyZXNzOiBuZXdPd25lcgoJLy8gICAgICAgICB9KQoJYnl0ZSAweDI0MjRmZjJhIC8vIE93bmVyc2hpcFRyYW5zZmVyU3RhcnRlZChhZGRyZXNzLGFkZHJlc3MpCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGFjY2VwdE93bmVyc2hpcCgpdm9pZAphYmlfcm91dGVfYWNjZXB0T3duZXJzaGlwOgoJLy8gZXhlY3V0ZSBhY2NlcHRPd25lcnNoaXAoKXZvaWQKCWNhbGxzdWIgYWNjZXB0T3duZXJzaGlwCglpbnQgMQoJcmV0dXJuCgovLyBhY2NlcHRPd25lcnNoaXAoKTogdm9pZAovLwovLyBAZGV2IFRoZSBuZXcgb3duZXIgYWNjZXB0cyB0aGUgb3duZXJzaGlwIHRyYW5zZmVyLgphY2NlcHRPd25lcnNoaXA6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo3NgoJLy8gc2VuZGVyOiBBZGRyZXNzID0gdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDAgLy8gc2VuZGVyOiBBZGRyZXNzCgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjc3CgkvLyBhc3NlcnQodGhpcy5wZW5kaW5nT3duZXIoKSA9PSBzZW5kZXIpCgljYWxsc3ViIHBlbmRpbmdPd25lcgoJZnJhbWVfZGlnIDAgLy8gc2VuZGVyOiBBZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjc5CgkvLyB0aGlzLl90cmFuc2Zlck93bmVyc2hpcDJTKHNlbmRlcikKCWZyYW1lX2RpZyAwIC8vIHNlbmRlcjogQWRkcmVzcwoJY2FsbHN1YiBfdHJhbnNmZXJPd25lcnNoaXAyUwoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAyUyhuZXdPd25lcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQGRldiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKSBhbmQgZGVsZXRlcyBhbnkgcGVuZGluZyBvd25lci4KLy8gSW50ZXJuYWwgZnVuY3Rpb24gd2l0aG91dCBhY2Nlc3MgcmVzdHJpY3Rpb24uCi8vIEZJWDogT25jZSBvdmVycmlkZXMgZXhpc3QsIHJlbmFtZSB0byBfdHJhbnNmZXJPd25lcnNoaXAKX3RyYW5zZmVyT3duZXJzaGlwMlM6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo5MAoJLy8gb2xkT3duZXI6IEFkZHJlc3MgPSB0aGlzLl9vd25lci5leGlzdHMgPyB0aGlzLl9vd25lci52YWx1ZSA6IGdsb2JhbHMuemVyb0FkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWJ6IHRlcm5hcnkzX2ZhbHNlCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJYiB0ZXJuYXJ5M19lbmQKCnRlcm5hcnkzX2ZhbHNlOgoJZ2xvYmFsIFplcm9BZGRyZXNzCgp0ZXJuYXJ5M19lbmQ6CglmcmFtZV9idXJ5IDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6OTEKCS8vIHRoaXMuX293bmVyLnZhbHVlID0gbmV3T3duZXIKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6OTMKCS8vIHRoaXMuT3duZXJzaGlwVHJhbnNmZXJyZWQubG9nKHsgb2xkQWRkcmVzczogb2xkT3duZXIsIG5ld0FkZHJlc3M6IG5ld093bmVyIH0pCglieXRlIDB4OWEyMjNlZmIgLy8gT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKQoJZnJhbWVfZGlnIDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBvbmx5UmVtb3RlVG9rZW5NZXNzZW5nZXIoZG9tYWluOiB1aW50MzIsIHRva2VuTWVzc2VuZ2VyOiBieXRlczMyKTogdm9pZAovLwovLyBAbm90aWNlIE9ubHkgYWNjZXB0IG1lc3NhZ2VzIGZyb20gYSByZWdpc3RlcmVkIFRva2VuTWVzc2VuZ2VyIGNvbnRyYWN0IG9uIGdpdmVuIHJlbW90ZSBkb21haW4KLy8gQHBhcmFtIGRvbWFpbiBUaGUgcmVtb3RlIGRvbWFpbgovLyBAcGFyYW0gdG9rZW5NZXNzZW5nZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIFRva2VuTWVzc2VuZ2VyIGNvbnRyYWN0IGZvciB0aGUgZ2l2ZW4gcmVtb3RlIGRvbWFpbgpvbmx5UmVtb3RlVG9rZW5NZXNzZW5nZXI6Cglwcm90byAyIDAKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxMzIKCS8vIGFzc2VydCh0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2Vycyhkb21haW4pLnZhbHVlID09PSB0b2tlbk1lc3NlbmdlcikKCWZyYW1lX2RpZyAtMSAvLyBkb21haW46IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWJveF9nZXQKCWFzc2VydAoJZnJhbWVfZGlnIC0yIC8vIHRva2VuTWVzc2VuZ2VyOiBieXRlczMyCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIG9ubHlMb2NhbE1lc3NhZ2VUcmFuc21pdHRlcigpOiB2b2lkCi8vCi8vIEBub3RpY2UgT25seSBhY2NlcHQgbWVzc2FnZXMgZnJvbSB0aGUgcmVnaXN0ZXJlZCBtZXNzYWdlIHRyYW5zbWl0dGVyIG9uIGxvY2FsIGRvbWFpbgpvbmx5TG9jYWxNZXNzYWdlVHJhbnNtaXR0ZXI6Cglwcm90byAwIDAKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxMzkKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubG9jYWxNZXNzYWdlVHJhbnNtaXR0ZXIudmFsdWUuYWRkcmVzcykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2NTczNzM2MTY3NjU1NDcyNjE2ZTczNmQ2OTc0NzQ2NTcyIC8vICJsb2NhbE1lc3NhZ2VUcmFuc21pdHRlciIKCWFwcF9nbG9iYWxfZ2V0CglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglwb3AKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gX2dldExvY2FsTWludGVyKCk6IEFwcGxpY2F0aW9uCi8vCi8vIEBub3RpY2UgcmV0dXJuIHRoZSBsb2NhbCBtaW50ZXIgYWRkcmVzcyBpZiBpdCBpcyBzZXQsIGVsc2UgcmV2ZXJ0LgovLyBAcmV0dXJuIGxvY2FsIG1pbnRlciBhcyBJVG9rZW5NaW50ZXIuCl9nZXRMb2NhbE1pbnRlcjoKCXByb3RvIDAgMQoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjE0OQoJLy8gYXNzZXJ0KHRoaXMubG9jYWxNaW50ZXIudmFsdWUpCglieXRlIDB4NmM2ZjYzNjE2YzRkNjk2ZTc0NjU3MiAvLyAibG9jYWxNaW50ZXIiCglhcHBfZ2xvYmFsX2dldAoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MTUxCgkvLyByZXR1cm4gdGhpcy5sb2NhbE1pbnRlci52YWx1ZTsKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2OTZlNzQ2NTcyIC8vICJsb2NhbE1pbnRlciIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIF9zZW5kRGVwb3NpdEZvckJ1cm5NZXNzYWdlKF9kZXN0aW5hdGlvbkRvbWFpbjogdWludDMyLCBfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogYnl0ZXMzMiwgX2Rlc3RpbmF0aW9uQ2FsbGVyOiBieXRlczMyLCBfYnVybk1lc3NhZ2U6IGJ5dGVzKTogdWludDY0Ci8vCi8vIEBub3RpY2UgU2VuZHMgYSBCdXJuTWVzc2FnZSB0aHJvdWdoIHRoZSBsb2NhbCBtZXNzYWdlIHRyYW5zbWl0dGVyCi8vIEBkZXYgY2FsbHMgbG9jYWwgbWVzc2FnZSB0cmFuc21pdHRlcidzIHNlbmRNZXNzYWdlKCkgZnVuY3Rpb24gaWYgYF9kZXN0aW5hdGlvbkNhbGxlcmAgPT0gYnl0ZXMzMigwKSwKLy8gb3IgZWxzZSBjYWxscyBzZW5kTWVzc2FnZVdpdGhDYWxsZXIoKS4KLy8gQHBhcmFtIF9kZXN0aW5hdGlvbkRvbWFpbiBkZXN0aW5hdGlvbiBkb21haW4KLy8gQHBhcmFtIF9kZXN0aW5hdGlvblRva2VuTWVzc2VuZ2VyIGFkZHJlc3Mgb2YgcmVnaXN0ZXJlZCBUb2tlbk1lc3NlbmdlciBjb250cmFjdCBvbiBkZXN0aW5hdGlvbiBkb21haW4sIGFzIGJ5dGVzMzIKLy8gQHBhcmFtIF9kZXN0aW5hdGlvbkNhbGxlciBjYWxsZXIgb24gdGhlIGRlc3RpbmF0aW9uIGRvbWFpbiwgYXMgYnl0ZXMzMi4gSWYgYF9kZXN0aW5hdGlvbkNhbGxlcmAgPT0gYnl0ZXMzMigwKSwKLy8gYW55IGFkZHJlc3MgY2FuIGNhbGwgcmVjZWl2ZU1lc3NhZ2UoKSBvbiBkZXN0aW5hdGlvbiBkb21haW4uCi8vIEBwYXJhbSBfYnVybk1lc3NhZ2UgZm9ybWF0dGVkIEJ1cm5NZXNzYWdlIGJ5dGVzIChtZXNzYWdlIGJvZHkpCi8vIEByZXR1cm4gbm9uY2UgdW5pcXVlIG5vbmNlIHJlc2VydmVkIGJ5IG1lc3NhZ2UKX3NlbmREZXBvc2l0Rm9yQnVybk1lc3NhZ2U6Cglwcm90byA0IDEKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxNzEKCS8vIF9kZXN0aW5hdGlvbkNhbGxlciA9PT0gYnplcm8oMzIpIGFzIGJ5dGVzMzIKCWZyYW1lX2RpZyAtMyAvLyBfZGVzdGluYXRpb25DYWxsZXI6IGJ5dGVzMzIKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgk9PQoJYnogaWYwX2Vsc2UKCgkvLyBpZjBfY29uc2VxdWVudAoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MTcyCgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8W3VpbnQzMiwgYnl0ZXMzMiwgYnl0ZXNdLCB1aW50NjQ+KHsKCS8vIAkJCQlhcHBsaWNhdGlvbklEOiB0aGlzLmxvY2FsTWVzc2FnZVRyYW5zbWl0dGVyLnZhbHVlLAoJLy8gCQkJCW5hbWU6ICdzZW5kTWVzc2FnZScsCgkvLyAJCQkJbWV0aG9kQXJnczogWwoJLy8gCQkJCQlfZGVzdGluYXRpb25Eb21haW4sCgkvLyAJCQkJCV9kZXN0aW5hdGlvblRva2VuTWVzc2VuZ2VyLAoJLy8gCQkJCQlfYnVybk1lc3NhZ2UKCS8vIAkJCQldCgkvLyAJCQl9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgInNlbmRNZXNzYWdlKHVpbnQzMixieXRlWzMyXSxieXRlW10pdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxNzMKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMubG9jYWxNZXNzYWdlVHJhbnNtaXR0ZXIudmFsdWUKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2NTczNzM2MTY3NjU1NDcyNjE2ZTczNmQ2OTc0NzQ2NTcyIC8vICJsb2NhbE1lc3NhZ2VUcmFuc21pdHRlciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxNzUKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vIAkJCQkJX2Rlc3RpbmF0aW9uRG9tYWluLAoJLy8gCQkJCQlfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlciwKCS8vIAkJCQkJX2J1cm5NZXNzYWdlCgkvLyAJCQkJXQoJZnJhbWVfZGlnIC0xIC8vIF9kZXN0aW5hdGlvbkRvbWFpbjogdWludDMyCglpdG9iCglleHRyYWN0IDQgNAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyBfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogYnl0ZXMzMgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtNCAvLyBfYnVybk1lc3NhZ2U6IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCXJldHN1YgoJYiBpZjBfZW5kCgppZjBfZWxzZToKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjE4MgoJLy8gcmV0dXJuIHNlbmRNZXRob2RDYWxsPFt1aW50MzIsIGJ5dGVzMzIsIGJ5dGVzMzIsIGJ5dGVzXSwgdWludDY0Pih7CgkvLyAJCQkJYXBwbGljYXRpb25JRDogdGhpcy5sb2NhbE1lc3NhZ2VUcmFuc21pdHRlci52YWx1ZSwKCS8vIAkJCQluYW1lOiAnc2VuZE1lc3NhZ2VXaXRoQ2FsbGVyJywKCS8vIAkJCQltZXRob2RBcmdzOiBbCgkvLyAJCQkJCV9kZXN0aW5hdGlvbkRvbWFpbiwKCS8vIAkJCQkJX2Rlc3RpbmF0aW9uVG9rZW5NZXNzZW5nZXIsCgkvLyAJCQkJCV9kZXN0aW5hdGlvbkNhbGxlciwKCS8vIAkJCQkJX2J1cm5NZXNzYWdlCgkvLyAJCQkJXSwKCS8vIAkJCX0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAic2VuZE1lc3NhZ2VXaXRoQ2FsbGVyKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSxieXRlW10pdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxODMKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMubG9jYWxNZXNzYWdlVHJhbnNtaXR0ZXIudmFsdWUKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2NTczNzM2MTY3NjU1NDcyNjE2ZTczNmQ2OTc0NzQ2NTcyIC8vICJsb2NhbE1lc3NhZ2VUcmFuc21pdHRlciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoxODUKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vIAkJCQkJX2Rlc3RpbmF0aW9uRG9tYWluLAoJLy8gCQkJCQlfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlciwKCS8vIAkJCQkJX2Rlc3RpbmF0aW9uQ2FsbGVyLAoJLy8gCQkJCQlfYnVybk1lc3NhZ2UKCS8vIAkJCQldCglmcmFtZV9kaWcgLTEgLy8gX2Rlc3RpbmF0aW9uRG9tYWluOiB1aW50MzIKCWl0b2IKCWV4dHJhY3QgNCA0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIF9kZXN0aW5hdGlvblRva2VuTWVzc2VuZ2VyOiBieXRlczMyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0zIC8vIF9kZXN0aW5hdGlvbkNhbGxlcjogYnl0ZXMzMgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtNCAvLyBfYnVybk1lc3NhZ2U6IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCXJldHN1YgoKaWYwX2VuZDoKCXJldHN1YgoKLy8gX2dldFJlbW90ZVRva2VuTWVzc2VuZ2VyKF9kb21haW46IHVpbnQzMik6IGJ5dGVzMzIKLy8KLy8gQG5vdGljZSByZXR1cm4gdGhlIHJlbW90ZSBUb2tlbk1lc3NlbmdlciBmb3IgdGhlIGdpdmVuIGBfZG9tYWluYCBpZiBvbmUgZXhpc3RzLCBlbHNlIHJldmVydC4KLy8gQHBhcmFtIF9kb21haW4gVGhlIGRvbWFpbiBmb3Igd2hpY2ggdG8gZ2V0IHRoZSByZW1vdGUgVG9rZW5NZXNzZW5nZXIKLy8gQHJldHVybiBfdG9rZW5NZXNzZW5nZXIgVGhlIGFkZHJlc3Mgb2YgdGhlIFRva2VuTWVzc2VuZ2VyIG9uIGBfZG9tYWluYCBhcyBieXRlczMyCl9nZXRSZW1vdGVUb2tlbk1lc3NlbmdlcjoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjAzCgkvLyBfdG9rZW5NZXNzZW5nZXIgPSB0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2VycyhfZG9tYWluKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIF9kb21haW46IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vX3Rva2VuTWVzc2VuZ2VyCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjA1CgkvLyBhc3NlcnQoX3Rva2VuTWVzc2VuZ2VyICE9PSBiemVybygzMikgYXMgYnl0ZXMzMikKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9fdG9rZW5NZXNzZW5nZXIKCWJveF9nZXQKCWFzc2VydAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCSE9Cglhc3NlcnQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyMDcKCS8vIHJldHVybiBfdG9rZW5NZXNzZW5nZXI7CglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vX3Rva2VuTWVzc2VuZ2VyCglib3hfZ2V0Cglhc3NlcnQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gX2RlcG9zaXRGb3JCdXJuKF9heGZlcjogQXNzZXRUcmFuc2ZlclR4biwgX2Rlc3RpbmF0aW9uRG9tYWluOiB1aW50MzIsIF9taW50UmVjaXBpZW50OiBieXRlczMyLCBfYnVyblRva2VuOiBBc3NldCwgX2Rlc3RpbmF0aW9uQ2FsbGVyOiBieXRlczMyKTogdWludDY0Ci8vCi8vIEBub3RpY2UgRGVwb3NpdHMgYW5kIGJ1cm5zIHRva2VucyBmcm9tIHNlbmRlciB0byBiZSBtaW50ZWQgb24gZGVzdGluYXRpb24gZG9tYWluLgovLyBFbWl0cyBhIGBEZXBvc2l0Rm9yQnVybmAgZXZlbnQuCi8vIEBwYXJhbSBfYXhmZXIgYXNzZXQgdHJhbnNmZXIgb2YgdG9rZW5zIHRvIGJ1cm4gKG11c3QgYmUgbm9uLXplcm8pCi8vIEBwYXJhbSBfZGVzdGluYXRpb25Eb21haW4gZGVzdGluYXRpb24gZG9tYWluCi8vIEBwYXJhbSBfbWludFJlY2lwaWVudCBhZGRyZXNzIG9mIG1pbnQgcmVjaXBpZW50IG9uIGRlc3RpbmF0aW9uIGRvbWFpbgovLyBAcGFyYW0gX2J1cm5Ub2tlbiBhZGRyZXNzIG9mIGNvbnRyYWN0IHRvIGJ1cm4gZGVwb3NpdGVkIHRva2Vucywgb24gbG9jYWwgZG9tYWluCi8vIEBwYXJhbSBfZGVzdGluYXRpb25DYWxsZXIgY2FsbGVyIG9uIHRoZSBkZXN0aW5hdGlvbiBkb21haW4sIGFzIGJ5dGVzMzIKLy8gQHJldHVybiBub25jZSB1bmlxdWUgbm9uY2UgcmVzZXJ2ZWQgYnkgbWVzc2FnZQpfZGVwb3NpdEZvckJ1cm46Cglwcm90byA1IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjI3CgkvLyBhc3NlcnQoX2F4ZmVyLmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0xIC8vIF9heGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjIyOAoJLy8gYXNzZXJ0KF9taW50UmVjaXBpZW50ICE9IGJ6ZXJvKDMyKSBhcyBieXRlczMyKQoJZnJhbWVfZGlnIC0zIC8vIF9taW50UmVjaXBpZW50OiBieXRlczMyCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJIT0KCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjIzMAoJLy8gX2Rlc3RpbmF0aW9uVG9rZW5NZXNzZW5nZXI6IGJ5dGVzMzIgPSB0aGlzLl9nZXRSZW1vdGVUb2tlbk1lc3NlbmdlcigKCS8vIAkJCV9kZXN0aW5hdGlvbkRvbWFpbgoJLy8gCQkpCglmcmFtZV9kaWcgLTIgLy8gX2Rlc3RpbmF0aW9uRG9tYWluOiB1aW50MzIKCWNhbGxzdWIgX2dldFJlbW90ZVRva2VuTWVzc2VuZ2VyCglmcmFtZV9idXJ5IDAgLy8gX2Rlc3RpbmF0aW9uVG9rZW5NZXNzZW5nZXI6IGJ5dGVzMzIKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyMzQKCS8vIF9sb2NhbE1pbnRlcjogQXBwbGljYXRpb24gPSB0aGlzLl9nZXRMb2NhbE1pbnRlcigpCgljYWxsc3ViIF9nZXRMb2NhbE1pbnRlcgoJZnJhbWVfYnVyeSAxIC8vIF9sb2NhbE1pbnRlcjogQXBwbGljYXRpb24KCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyMzcKCS8vIGFzc2VydChfYXhmZXIueGZlckFzc2V0ID09PSBfYnVyblRva2VuKQoJZnJhbWVfZGlnIC0xIC8vIF9heGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9kaWcgLTQgLy8gX2J1cm5Ub2tlbjogQXNzZXQKCT09Cglhc3NlcnQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyMzgKCS8vIGFzc2VydChfYXhmZXIuYXNzZXRDbG9zZVRvICE9PSBfbG9jYWxNaW50ZXIuYWRkcmVzcykKCWZyYW1lX2RpZyAtMSAvLyBfYXhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0Q2xvc2VUbwoJZnJhbWVfZGlnIDEgLy8gX2xvY2FsTWludGVyOiBBcHBsaWNhdGlvbgoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgkhPQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjM5CgkvLyBhc3NlcnQoX2F4ZmVyLmFzc2V0UmVjZWl2ZXIgPT09IF9sb2NhbE1pbnRlci5hZGRyZXNzKQoJZnJhbWVfZGlnIC0xIC8vIF9heGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIDEgLy8gX2xvY2FsTWludGVyOiBBcHBsaWNhdGlvbgoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjQyCgkvLyBzZW5kTWV0aG9kQ2FsbDxbQXNzZXQsIHVpbnQ2NF0sIHZvaWQ+KHsKCS8vIAkJCWFwcGxpY2F0aW9uSUQ6IF9sb2NhbE1pbnRlciwKCS8vIAkJCW5hbWU6ICdidXJuJywKCS8vIAkJCW1ldGhvZEFyZ3M6IFsKCS8vIAkJCQlfYnVyblRva2VuLAoJLy8gCQkJCV9heGZlci5hc3NldEFtb3VudAoJLy8gCQkJXSwKCS8vIAkJfSkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImJ1cm4oYXNzZXQsdWludDY0KXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjI0MwoJLy8gYXBwbGljYXRpb25JRDogX2xvY2FsTWludGVyCglmcmFtZV9kaWcgMSAvLyBfbG9jYWxNaW50ZXI6IEFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyNDUKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vIAkJCQlfYnVyblRva2VuLAoJLy8gCQkJCV9heGZlci5hc3NldEFtb3VudAoJLy8gCQkJXQoJZnJhbWVfZGlnIC00IC8vIF9idXJuVG9rZW46IEFzc2V0CglpdHhuX2ZpZWxkIEFzc2V0cwoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTEgLy8gX2F4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjUyCgkvLyBfYnVybk1lc3NhZ2U6IEJ1cm5NZXNzYWdlID0gewoJLy8gCQkJX3ZlcnNpb246IHRoaXMubWVzc2FnZUJvZHlWZXJzaW9uLnZhbHVlIGFzIHVpbnQzMiwKCS8vIAkJCV9idXJuVG9rZW46IGNvbmNhdChiemVybygzMiAtIGxlbihpdG9iKF9idXJuVG9rZW4pKSksIGl0b2IoX2J1cm5Ub2tlbikpIGFzIGJ5dGVzMzIsCgkvLyAJCQlfbWludFJlY2lwaWVudDogX21pbnRSZWNpcGllbnQsCgkvLyAJCQlfYW1vdW50OiBfYXhmZXIuYXNzZXRBbW91bnQgYXMgdWludDI1NiwKCS8vIAkJCV9tZXNzYWdlU2VuZGVyOiByYXdCeXRlcyh0aGlzLnR4bi5zZW5kZXIpIGFzIGJ5dGVzMzIKCS8vIAkJfQoJYnl0ZSAweDZkNjU3MzczNjE2NzY1NDI2ZjY0Nzk1NjY1NzI3MzY5NmY2ZSAvLyAibWVzc2FnZUJvZHlWZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgNCA0CglpbnQgMzIKCWZyYW1lX2RpZyAtNCAvLyBfYnVyblRva2VuOiBBc3NldAoJaXRvYgoJbGVuCgktCgliemVybwoJZnJhbWVfZGlnIC00IC8vIF9idXJuVG9rZW46IEFzc2V0CglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWR1cAoJZXh0cmFjdCAzMiAwCglieXRlIDB4CgliPT0KCWFzc2VydAoJZXh0cmFjdCAwIDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBfbWludFJlY2lwaWVudDogYnl0ZXMzMgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gX2F4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCXR4biBTZW5kZXIKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWR1cAoJZXh0cmFjdCAzMiAwCglieXRlIDB4CgliPT0KCWFzc2VydAoJZXh0cmFjdCAwIDMyCgljb25jYXQKCWZyYW1lX2J1cnkgMiAvLyBfYnVybk1lc3NhZ2U6IEJ1cm5NZXNzYWdlCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MjYwCgkvLyBfbm9uY2VSZXNlcnZlZDogdWludDY0ID0gdGhpcy5fc2VuZERlcG9zaXRGb3JCdXJuTWVzc2FnZSgKCS8vIAkJCV9kZXN0aW5hdGlvbkRvbWFpbiwKCS8vIAkJCV9kZXN0aW5hdGlvblRva2VuTWVzc2VuZ2VyLAoJLy8gCQkJX2Rlc3RpbmF0aW9uQ2FsbGVyLAoJLy8gCQkJcmF3Qnl0ZXMoX2J1cm5NZXNzYWdlKQoJLy8gCQkpCglmcmFtZV9kaWcgMiAvLyBfYnVybk1lc3NhZ2U6IEJ1cm5NZXNzYWdlCglmcmFtZV9kaWcgLTUgLy8gX2Rlc3RpbmF0aW9uQ2FsbGVyOiBieXRlczMyCglmcmFtZV9kaWcgMCAvLyBfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogYnl0ZXMzMgoJZnJhbWVfZGlnIC0yIC8vIF9kZXN0aW5hdGlvbkRvbWFpbjogdWludDMyCgljYWxsc3ViIF9zZW5kRGVwb3NpdEZvckJ1cm5NZXNzYWdlCglmcmFtZV9idXJ5IDMgLy8gX25vbmNlUmVzZXJ2ZWQ6IHVpbnQ2NAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjI2NwoJLy8gdGhpcy5EZXBvc2l0Rm9yQnVybi5sb2coewoJLy8gCQkJbm9uY2U6IF9ub25jZVJlc2VydmVkLAoJLy8gCQkJYnVyblRva2VuOiBfYnVyblRva2VuLAoJLy8gCQkJYW1vdW50OiBfYXhmZXIuYXNzZXRBbW91bnQgYXMgdWludDI1NiwKCS8vIAkJCWRlcG9zaXRvcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gCQkJbWludFJlY2lwaWVudDogX21pbnRSZWNpcGllbnQsCgkvLyAJCQlkZXN0aW5hdGlvbkRvbWFpbjogX2Rlc3RpbmF0aW9uRG9tYWluLAoJLy8gCQkJZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogX2Rlc3RpbmF0aW9uVG9rZW5NZXNzZW5nZXIsCgkvLyAJCQlkZXN0aW5hdGlvbkNhbGxlcjogX2Rlc3RpbmF0aW9uQ2FsbGVyCgkvLyAJCX0pCglieXRlIDB4ZDkwNzRjYTEgLy8gRGVwb3NpdEZvckJ1cm4odWludDY0LHVpbnQ2NCx1aW50MjU2LGFkZHJlc3MsYnl0ZVszMl0sdWludDMyLGJ5dGVbMzJdLGJ5dGVbMzJdKQoJZnJhbWVfZGlnIDMgLy8gX25vbmNlUmVzZXJ2ZWQ6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC00IC8vIF9idXJuVG9rZW46IEFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBfYXhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpdG9iCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gX21pbnRSZWNpcGllbnQ6IGJ5dGVzMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIF9kZXN0aW5hdGlvbkRvbWFpbjogdWludDMyCglpdG9iCglleHRyYWN0IDQgNAoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyBfZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogYnl0ZXMzMgoJY29uY2F0CglmcmFtZV9kaWcgLTUgLy8gX2Rlc3RpbmF0aW9uQ2FsbGVyOiBieXRlczMyCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6Mjc4CgkvLyByZXR1cm4gX25vbmNlUmVzZXJ2ZWQ7CglmcmFtZV9kaWcgMyAvLyBfbm9uY2VSZXNlcnZlZDogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMwoJcmV0c3ViCgovLyBfbWludEFuZFdpdGhkcmF3KF90b2tlbk1pbnRlcjogQXBwbGljYXRpb24sIF9yZW1vdGVEb21haW46IHVpbnQzMiwgX2J1cm5Ub2tlbjogYnl0ZXMzMiwgX21pbnRSZWNpcGllbnQ6IEFkZHJlc3MsIF9hbW91bnQ6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gQG5vdGljZSBNaW50cyB0b2tlbnMgdG8gYSByZWNpcGllbnQKLy8gQHBhcmFtIF90b2tlbk1pbnRlciBpZCBvZiBUb2tlbk1pbnRlciBjb250cmFjdAovLyBAcGFyYW0gX3JlbW90ZURvbWFpbiBkb21haW4gd2hlcmUgYnVybmVkIHRva2VucyBvcmlnaW5hdGUgZnJvbQovLyBAcGFyYW0gX2J1cm5Ub2tlbiBhZGRyZXNzIG9mIHRva2VuIGJ1cm5lZAovLyBAcGFyYW0gX21pbnRSZWNpcGllbnQgcmVjaXBpZW50IGFkZHJlc3Mgb2YgbWludGVkIHRva2VucwovLyBAcGFyYW0gX2Ftb3VudCBhbW91bnQgb2YgbWludGVkIHRva2VucwpfbWludEFuZFdpdGhkcmF3OgoJcHJvdG8gNSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czoyOTYKCS8vIF9taW50VG9rZW4gPSBzZW5kTWV0aG9kQ2FsbDxbdWludDMyLCBieXRlczMyLCBBZGRyZXNzLCB1aW50NjRdLCBBc3NldD4oewoJLy8gCQkJYXBwbGljYXRpb25JRDogX3Rva2VuTWludGVyLAoJLy8gCQkJbmFtZTogJ21pbnQnLAoJLy8gCQkJbWV0aG9kQXJnczogWwoJLy8gCQkJCV9yZW1vdGVEb21haW4sCgkvLyAJCQkJX2J1cm5Ub2tlbiwKCS8vIAkJCQlfbWludFJlY2lwaWVudCwKCS8vIAkJCQlfYW1vdW50CgkvLyAJCQldCgkvLyAJCX0pCglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJbWV0aG9kICJtaW50KHVpbnQzMixieXRlWzMyXSxhZGRyZXNzLHVpbnQ2NCl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjI5NwoJLy8gYXBwbGljYXRpb25JRDogX3Rva2VuTWludGVyCglmcmFtZV9kaWcgLTEgLy8gX3Rva2VuTWludGVyOiBBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6Mjk5CgkvLyBtZXRob2RBcmdzOiBbCgkvLyAJCQkJX3JlbW90ZURvbWFpbiwKCS8vIAkJCQlfYnVyblRva2VuLAoJLy8gCQkJCV9taW50UmVjaXBpZW50LAoJLy8gCQkJCV9hbW91bnQKCS8vIAkJCV0KCWZyYW1lX2RpZyAtMiAvLyBfcmVtb3RlRG9tYWluOiB1aW50MzIKCWl0b2IKCWV4dHJhY3QgNCA0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0zIC8vIF9idXJuVG9rZW46IGJ5dGVzMzIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTQgLy8gX21pbnRSZWNpcGllbnQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTUgLy8gX2Ftb3VudDogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIF9taW50VG9rZW46IGFzc2V0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MzA3CgkvLyB0aGlzLk1pbnRBbmRXaXRoZHJhdy5sb2coewoJLy8gCQkJbWludFJlY2lwaWVudDogX21pbnRSZWNpcGllbnQsCgkvLyAJCQlhbW91bnQ6IDx1aW50MjU2Pl9hbW91bnQsCgkvLyAJCQltaW50VG9rZW46IF9taW50VG9rZW4KCS8vIAkJfSkKCWJ5dGUgMHhkYTUzNWRiYSAvLyBNaW50QW5kV2l0aGRyYXcoYWRkcmVzcyx1aW50MjU2LHVpbnQ2NCkKCWZyYW1lX2RpZyAtNCAvLyBfbWludFJlY2lwaWVudDogQWRkcmVzcwoJZnJhbWVfZGlnIC01IC8vIF9hbW91bnQ6IHVpbnQ2NAoJaXRvYgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIF9taW50VG9rZW46IGFzc2V0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGRlcG9zaXRGb3JCdXJuKGF4ZmVyLHVpbnQzMixieXRlWzMyXSxhc3NldCl1aW50NjQKYWJpX3JvdXRlX2RlcG9zaXRGb3JCdXJuOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBidXJuVG9rZW46IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBtaW50UmVjaXBpZW50OiBieXRlWzMyXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGRlc3RpbmF0aW9uRG9tYWluOiB1aW50MzIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgNAoJPT0KCWFzc2VydAoJYnRvaQoKCS8vIGF4ZmVyOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXhmZXIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGRlcG9zaXRGb3JCdXJuKGF4ZmVyLHVpbnQzMixieXRlWzMyXSxhc3NldCl1aW50NjQKCWNhbGxzdWIgZGVwb3NpdEZvckJ1cm4KCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBkZXBvc2l0Rm9yQnVybihheGZlcjogQXNzZXRUcmFuc2ZlclR4biwgZGVzdGluYXRpb25Eb21haW46IHVpbnQzMiwgbWludFJlY2lwaWVudDogYnl0ZXMzMiwgYnVyblRva2VuOiBBc3NldCk6IHVpbnQ2NAovLwovLyBAbm90aWNlIERlcG9zaXRzIGFuZCBidXJucyB0b2tlbnMgZnJvbSBzZW5kZXIgdG8gYmUgbWludGVkIG9uIGRlc3RpbmF0aW9uIGRvbWFpbi4KLy8gRW1pdHMgYSBgRGVwb3NpdEZvckJ1cm5gIGV2ZW50LgovLyBAZGV2IHJldmVydHMgaWY6Ci8vIC0gZ2l2ZW4gYnVyblRva2VuIGlzIG5vdCBzdXBwb3J0ZWQKLy8gLSBnaXZlbiBkZXN0aW5hdGlvbkRvbWFpbiBoYXMgbm8gVG9rZW5NZXNzZW5nZXIgcmVnaXN0ZXJlZAovLyAtIHRyYW5zZmVyRnJvbSgpIHJldmVydHMuIEZvciBleGFtcGxlLCBpZiBzZW5kZXIncyBidXJuVG9rZW4gYmFsYW5jZSBvciBhcHByb3ZlZCBhbGxvd2FuY2UKLy8gdG8gdGhpcyBjb250cmFjdCBpcyBsZXNzIHRoYW4gYGFtb3VudGAuCi8vIC0gYnVybigpIHJldmVydHMuIEZvciBleGFtcGxlLCBpZiBgYW1vdW50YCBpcyAwLgovLyAtIE1lc3NhZ2VUcmFuc21pdHRlciByZXR1cm5zIGZhbHNlIG9yIHJldmVydHMuCi8vIEBwYXJhbSBheGZlciBhc3NldCB0cmFuc2ZlciBvZiB0b2tlbnMgdG8gYnVybgovLyBAcGFyYW0gZGVzdGluYXRpb25Eb21haW4gZGVzdGluYXRpb24gZG9tYWluCi8vIEBwYXJhbSBtaW50UmVjaXBpZW50IGFkZHJlc3Mgb2YgbWludCByZWNpcGllbnQgb24gZGVzdGluYXRpb24gZG9tYWluCi8vIEBwYXJhbSBidXJuVG9rZW4gYWRkcmVzcyBvZiBjb250cmFjdCB0byBidXJuIGRlcG9zaXRlZCB0b2tlbnMsIG9uIGxvY2FsIGRvbWFpbgovLyBAcmV0dXJuIF9ub25jZSB1bmlxdWUgbm9uY2UgcmVzZXJ2ZWQgYnkgbWVzc2FnZQpkZXBvc2l0Rm9yQnVybjoKCXByb3RvIDQgMQoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjMzOAoJLy8gcmV0dXJuIHRoaXMuX2RlcG9zaXRGb3JCdXJuKAoJLy8gCQkJYXhmZXIsCgkvLyAJCQlkZXN0aW5hdGlvbkRvbWFpbiwKCS8vIAkJCW1pbnRSZWNpcGllbnQsCgkvLyAJCQlidXJuVG9rZW4sCgkvLyAJCQkvLyAoemVyb0FkZHJlc3MgaGVyZSBpbmRpY2F0ZXMgdGhhdCBhbnkgYWRkcmVzcyBjYW4gY2FsbCByZWNlaXZlTWVzc2FnZSgpCgkvLyAJCQkvLyBvbiB0aGUgZGVzdGluYXRpb24gZG9tYWluLCB0cmlnZ2VyaW5nIG1pbnQgdG8gc3BlY2lmaWVkIGBtaW50UmVjaXBpZW50YCkKCS8vIAkJCWJ6ZXJvKDMyKSBhcyBTdGF0aWNBcnJheTxieXRlLCAzMj4KCS8vIAkJKTsKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCglmcmFtZV9kaWcgLTQgLy8gYnVyblRva2VuOiBBc3NldAoJZnJhbWVfZGlnIC0zIC8vIG1pbnRSZWNpcGllbnQ6IGJ5dGVzMzIKCWZyYW1lX2RpZyAtMiAvLyBkZXN0aW5hdGlvbkRvbWFpbjogdWludDMyCglmcmFtZV9kaWcgLTEgLy8gYXhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWNhbGxzdWIgX2RlcG9zaXRGb3JCdXJuCglyZXRzdWIKCi8vIGRlcG9zaXRGb3JCdXJuV2l0aENhbGxlcihheGZlcix1aW50MzIsYnl0ZVszMl0sYXNzZXQsYnl0ZVszMl0pdWludDY0CmFiaV9yb3V0ZV9kZXBvc2l0Rm9yQnVybldpdGhDYWxsZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGRlc3RpbmF0aW9uQ2FsbGVyOiBieXRlWzMyXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGJ1cm5Ub2tlbjogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIG1pbnRSZWNpcGllbnQ6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZGVzdGluYXRpb25Eb21haW46IHVpbnQzMgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCA0Cgk9PQoJYXNzZXJ0CglidG9pCgoJLy8gYXhmZXI6IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyKGF4ZmVyLHVpbnQzMixieXRlWzMyXSxhc3NldCxieXRlWzMyXSl1aW50NjQKCWNhbGxzdWIgZGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyKGF4ZmVyOiBBc3NldFRyYW5zZmVyVHhuLCBkZXN0aW5hdGlvbkRvbWFpbjogdWludDMyLCBtaW50UmVjaXBpZW50OiBieXRlczMyLCBidXJuVG9rZW46IEFzc2V0LCBkZXN0aW5hdGlvbkNhbGxlcjogYnl0ZXMzMik6IHVpbnQ2NAovLwovLyBAbm90aWNlIERlcG9zaXRzIGFuZCBidXJucyB0b2tlbnMgZnJvbSBzZW5kZXIgdG8gYmUgbWludGVkIG9uIGRlc3RpbmF0aW9uIGRvbWFpbi4gVGhlIG1pbnQKLy8gb24gdGhlIGRlc3RpbmF0aW9uIGRvbWFpbiBtdXN0IGJlIGNhbGxlZCBieSBgZGVzdGluYXRpb25DYWxsZXJgLgovLyBXQVJOSU5HOiBpZiB0aGUgYGRlc3RpbmF0aW9uQ2FsbGVyYCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWxpZCBhZGRyZXNzIGFzIGJ5dGVzMzIsIHRoZW4gaXQgd2lsbCBub3QgYmUgcG9zc2libGUKLy8gdG8gYnJvYWRjYXN0IHRoZSBtZXNzYWdlIG9uIHRoZSBkZXN0aW5hdGlvbiBkb21haW4uIFRoaXMgaXMgYW4gYWR2YW5jZWQgZmVhdHVyZSwgYW5kIHRoZSBzdGFuZGFyZAovLyBkZXBvc2l0Rm9yQnVybigpIHNob3VsZCBiZSBwcmVmZXJyZWQgZm9yIHVzZSBjYXNlcyB3aGVyZSBhIHNwZWNpZmljIGRlc3RpbmF0aW9uIGNhbGxlciBpcyBub3QgcmVxdWlyZWQuCi8vIEVtaXRzIGEgYERlcG9zaXRGb3JCdXJuYCBldmVudC4KLy8gQGRldiByZXZlcnRzIGlmOgovLyAtIGdpdmVuIGRlc3RpbmF0aW9uQ2FsbGVyIGlzIHplcm8gYWRkcmVzcwovLyAtIGdpdmVuIGJ1cm5Ub2tlbiBpcyBub3Qgc3VwcG9ydGVkCi8vIC0gZ2l2ZW4gZGVzdGluYXRpb25Eb21haW4gaGFzIG5vIFRva2VuTWVzc2VuZ2VyIHJlZ2lzdGVyZWQKLy8gLSB0cmFuc2ZlckZyb20oKSByZXZlcnRzLiBGb3IgZXhhbXBsZSwgaWYgc2VuZGVyJ3MgYnVyblRva2VuIGJhbGFuY2Ugb3IgYXBwcm92ZWQgYWxsb3dhbmNlCi8vIHRvIHRoaXMgY29udHJhY3QgaXMgbGVzcyB0aGFuIGBhbW91bnRgLgovLyAtIGJ1cm4oKSByZXZlcnRzLiBGb3IgZXhhbXBsZSwgaWYgYGFtb3VudGAgaXMgMC4KLy8gLSBNZXNzYWdlVHJhbnNtaXR0ZXIgcmV0dXJucyBmYWxzZSBvciByZXZlcnRzLgovLyBAcGFyYW0gYXhmZXIgYW1vdW50IG9mIHRva2VucyB0byBidXJuIChtdXN0IGJlIG5vbi16ZXJvKQovLyBAcGFyYW0gZGVzdGluYXRpb25Eb21haW4gZGVzdGluYXRpb24gZG9tYWluCi8vIEBwYXJhbSBtaW50UmVjaXBpZW50IGFkZHJlc3Mgb2YgbWludCByZWNpcGllbnQgb24gZGVzdGluYXRpb24gZG9tYWluCi8vIEBwYXJhbSBidXJuVG9rZW4gYWRkcmVzcyBvZiBjb250cmFjdCB0byBidXJuIGRlcG9zaXRlZCB0b2tlbnMsIG9uIGxvY2FsIGRvbWFpbgovLyBAcGFyYW0gZGVzdGluYXRpb25DYWxsZXIgY2FsbGVyIG9uIHRoZSBkZXN0aW5hdGlvbiBkb21haW4sIGFzIGJ5dGVzMzIKLy8gQHJldHVybiBub25jZSB1bmlxdWUgbm9uY2UgcmVzZXJ2ZWQgYnkgbWVzc2FnZQpkZXBvc2l0Rm9yQnVybldpdGhDYWxsZXI6Cglwcm90byA1IDEKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czozNzkKCS8vIGFzc2VydChkZXN0aW5hdGlvbkNhbGxlciAhPT0gYnplcm8oMzIpIGFzIGJ5dGVzMzIpCglmcmFtZV9kaWcgLTUgLy8gZGVzdGluYXRpb25DYWxsZXI6IGJ5dGVzMzIKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgkhPQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6MzgxCgkvLyByZXR1cm4gdGhpcy5fZGVwb3NpdEZvckJ1cm4oCgkvLyAJCQlheGZlciwKCS8vIAkJCWRlc3RpbmF0aW9uRG9tYWluLAoJLy8gCQkJbWludFJlY2lwaWVudCwKCS8vIAkJCWJ1cm5Ub2tlbiwKCS8vIAkJCWRlc3RpbmF0aW9uQ2FsbGVyCgkvLyAJCSk7CglmcmFtZV9kaWcgLTUgLy8gZGVzdGluYXRpb25DYWxsZXI6IGJ5dGVzMzIKCWZyYW1lX2RpZyAtNCAvLyBidXJuVG9rZW46IEFzc2V0CglmcmFtZV9kaWcgLTMgLy8gbWludFJlY2lwaWVudDogYnl0ZXMzMgoJZnJhbWVfZGlnIC0yIC8vIGRlc3RpbmF0aW9uRG9tYWluOiB1aW50MzIKCWZyYW1lX2RpZyAtMSAvLyBheGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJY2FsbHN1YiBfZGVwb3NpdEZvckJ1cm4KCXJldHN1YgoKLy8gcmVwbGFjZURlcG9zaXRGb3JCdXJuKGJ5dGVbXSxieXRlW10sYnl0ZVszMl0sYnl0ZVszMl0pdm9pZAphYmlfcm91dGVfcmVwbGFjZURlcG9zaXRGb3JCdXJuOgoJLy8gbmV3TWludFJlY2lwaWVudDogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBuZXdEZXN0aW5hdGlvbkNhbGxlcjogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvcmlnaW5hbEF0dGVzdGF0aW9uOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gb3JpZ2luYWxNZXNzYWdlOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSByZXBsYWNlRGVwb3NpdEZvckJ1cm4oYnl0ZVtdLGJ5dGVbXSxieXRlWzMyXSxieXRlWzMyXSl2b2lkCgljYWxsc3ViIHJlcGxhY2VEZXBvc2l0Rm9yQnVybgoJaW50IDEKCXJldHVybgoKLy8gcmVwbGFjZURlcG9zaXRGb3JCdXJuKG9yaWdpbmFsTWVzc2FnZTogYnl0ZXMsIG9yaWdpbmFsQXR0ZXN0YXRpb246IGJ5dGVzLCBuZXdEZXN0aW5hdGlvbkNhbGxlcjogYnl0ZXMzMiwgbmV3TWludFJlY2lwaWVudDogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQG5vdGljZSBSZXBsYWNlIGEgQnVybk1lc3NhZ2UgdG8gY2hhbmdlIHRoZSBtaW50IHJlY2lwaWVudCBhbmQvb3IKLy8gZGVzdGluYXRpb24gY2FsbGVyLiBBbGxvd3MgdGhlIHNlbmRlciBvZiBhIHByZXZpb3VzIEJ1cm5NZXNzYWdlCi8vIChjcmVhdGVkIGJ5IGRlcG9zaXRGb3JCdXJuIG9yIGRlcG9zaXRGb3JCdXJuV2l0aENhbGxlcikKLy8gdG8gc2VuZCBhIG5ldyBCdXJuTWVzc2FnZSB0byByZXBsYWNlIHRoZSBvcmlnaW5hbC4KLy8gVGhlIG5ldyBCdXJuTWVzc2FnZSB3aWxsIHJldXNlIHRoZSBhbW91bnQgYW5kIGJ1cm4gdG9rZW4gb2YgdGhlIG9yaWdpbmFsLAovLyB3aXRob3V0IHJlcXVpcmluZyBhIG5ldyBkZXBvc2l0LgovLyBAZGV2IFRoZSBuZXcgbWVzc2FnZSB3aWxsIHJldXNlIHRoZSBvcmlnaW5hbCBtZXNzYWdlJ3Mgbm9uY2UuIEZvciBhCi8vIGdpdmVuIG5vbmNlLCBhbGwgcmVwbGFjZW1lbnQgbWVzc2FnZShzKSBhbmQgdGhlIG9yaWdpbmFsIG1lc3NhZ2UgYXJlCi8vIHZhbGlkIHRvIGJyb2FkY2FzdCBvbiB0aGUgZGVzdGluYXRpb24gZG9tYWluLCB1bnRpbCB0aGUgZmlyc3QgbWVzc2FnZQovLyBhdCB0aGUgbm9uY2UgY29uZmlybXMsIGF0IHdoaWNoIHBvaW50IGFsbCBvdGhlcnMgYXJlIGludmFsaWRhdGVkLgovLyBOb3RlOiBUaGUgbXNnLnNlbmRlciBvZiB0aGUgcmVwbGFjZWQgbWVzc2FnZSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZQovLyBtc2cuc2VuZGVyIG9mIHRoZSBvcmlnaW5hbCBtZXNzYWdlLgovLyBAcGFyYW0gb3JpZ2luYWxNZXNzYWdlIG9yaWdpbmFsIG1lc3NhZ2UgYnl0ZXMgKHRvIHJlcGxhY2UpCi8vIEBwYXJhbSBvcmlnaW5hbEF0dGVzdGF0aW9uIG9yaWdpbmFsIGF0dGVzdGF0aW9uIGJ5dGVzCi8vIEBwYXJhbSBuZXdEZXN0aW5hdGlvbkNhbGxlciB0aGUgbmV3IGRlc3RpbmF0aW9uIGNhbGxlciwgd2hpY2ggbWF5IGJlIHRoZQovLyBzYW1lIGFzIHRoZSBvcmlnaW5hbCBkZXN0aW5hdGlvbiBjYWxsZXIsIGEgbmV3IGRlc3RpbmF0aW9uIGNhbGxlciwgb3IgYW4gZW1wdHkKLy8gZGVzdGluYXRpb24gY2FsbGVyIChieXRlczMyKDApLCBpbmRpY2F0aW5nIHRoYXQgYW55IGRlc3RpbmF0aW9uIGNhbGxlciBpcyB2YWxpZC4pCi8vIEBwYXJhbSBuZXdNaW50UmVjaXBpZW50IHRoZSBuZXcgbWludCByZWNpcGllbnQsIHdoaWNoIG1heSBiZSB0aGUgc2FtZSBhcyB0aGUKLy8gb3JpZ2luYWwgbWludCByZWNpcGllbnQsIG9yIGRpZmZlcmVudC4KcmVwbGFjZURlcG9zaXRGb3JCdXJuOgoJcHJvdG8gNCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gNQoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQxNwoJLy8gbXNnTGVuZ3RoID0gb3JpZ2luYWxNZXNzYWdlLmxlbmd0aAoJZnJhbWVfZGlnIC0xIC8vIG9yaWdpbmFsTWVzc2FnZTogYnl0ZXMKCWxlbgoJZnJhbWVfYnVyeSAwIC8vIG1zZ0xlbmd0aDogdWludDY0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDE4CgkvLyBfb3JpZ2luYWxNc2cgPSBjYXN0Qnl0ZXM8TWVzc2FnZT4ob3JpZ2luYWxNZXNzYWdlKQoJZnJhbWVfZGlnIC0xIC8vIG9yaWdpbmFsTWVzc2FnZTogYnl0ZXMKCWZyYW1lX2J1cnkgMSAvLyBfb3JpZ2luYWxNc2c6ICh1aW50MzIsdWludDMyLHVpbnQzMix1aW50NjQsYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0pCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDE5CgkvLyBfb3JpZ2luYWxNc2dCb2R5ID0gY2FzdEJ5dGVzPEJ1cm5NZXNzYWdlPihzdWJzdHJpbmczKG9yaWdpbmFsTWVzc2FnZSwgMTE2LCBtc2dMZW5ndGgpKQoJZnJhbWVfZGlnIC0xIC8vIG9yaWdpbmFsTWVzc2FnZTogYnl0ZXMKCWludCAxMTYKCWZyYW1lX2RpZyAwIC8vIG1zZ0xlbmd0aDogdWludDY0CglzdWJzdHJpbmczCglmcmFtZV9idXJ5IDIgLy8gX29yaWdpbmFsTXNnQm9keTogKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSx1aW50MjU2LGJ5dGVbMzJdKQoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQyMwoJLy8gYXNzZXJ0KHJhd0J5dGVzKGdsb2JhbHMuY2FsbGVyQXBwbGljYXRpb25BZGRyZXNzKSBhcyBieXRlczMyID09PSBfb3JpZ2luYWxNc2dTZW5kZXIpCglnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25BZGRyZXNzCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglkdXAKCWV4dHJhY3QgMzIgMAoJYnl0ZSAweAoJYj09Cglhc3NlcnQKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDIgLy8gX29yaWdpbmFsTXNnQm9keTogKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSx1aW50MjU2LGJ5dGVbMzJdKQoJZXh0cmFjdCAxMDAgMzIKCT09Cglhc3NlcnQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo0MjQKCS8vIGFzc2VydChuZXdNaW50UmVjaXBpZW50ICE9PSBiemVybygzMikgYXMgYnl0ZXMzMikKCWZyYW1lX2RpZyAtNCAvLyBuZXdNaW50UmVjaXBpZW50OiBieXRlczMyCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJIT0KCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQyNgoJLy8gX2J1cm5Ub2tlbiA9IEFzc2V0LmZyb21JRChidG9pKF9vcmlnaW5hbE1zZ0JvZHkuX2J1cm5Ub2tlbikpCglmcmFtZV9kaWcgMiAvLyBfb3JpZ2luYWxNc2dCb2R5OiAodWludDMyLGJ5dGVbMzJdLGJ5dGVbMzJdLHVpbnQyNTYsYnl0ZVszMl0pCglleHRyYWN0IDQgMzIKCWJ0b2kKCWZyYW1lX2J1cnkgMyAvLyBfYnVyblRva2VuOiBhc3NldAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQyNwoJLy8gX2Ftb3VudCA9IF9vcmlnaW5hbE1zZ0JvZHkuX2Ftb3VudAoJZnJhbWVfZGlnIDIgLy8gX29yaWdpbmFsTXNnQm9keTogKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSx1aW50MjU2LGJ5dGVbMzJdKQoJZXh0cmFjdCA2OCAzMgoJZnJhbWVfYnVyeSA0IC8vIF9hbW91bnQ6IHVpbnQyNTYKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo0MjkKCS8vIG5ld01lc3NhZ2VCb2R5OiBCdXJuTWVzc2FnZSA9IHsKCS8vIAkJCV92ZXJzaW9uOiB0aGlzLm1lc3NhZ2VCb2R5VmVyc2lvbi52YWx1ZSwKCS8vIAkJCV9idXJuVG9rZW46IGl0b2IoX2J1cm5Ub2tlbikgYXMgYnl0ZXMzMiwKCS8vIAkJCV9taW50UmVjaXBpZW50OiBuZXdNaW50UmVjaXBpZW50LAoJLy8gCQkJX2Ftb3VudDogX2Ftb3VudCwKCS8vIAkJCV9tZXNzYWdlU2VuZGVyOiBfb3JpZ2luYWxNc2dTZW5kZXIKCS8vIAkJfQoJYnl0ZSAweDZkNjU3MzczNjE2NzY1NDI2ZjY0Nzk1NjY1NzI3MzY5NmY2ZSAvLyAibWVzc2FnZUJvZHlWZXJzaW9uIgoJYXBwX2dsb2JhbF9nZXQKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgNCA0CglmcmFtZV9kaWcgMyAvLyBfYnVyblRva2VuOiBhc3NldAoJaXRvYgoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZHVwCglleHRyYWN0IDMyIDAKCWJ5dGUgMHgKCWI9PQoJYXNzZXJ0CglleHRyYWN0IDAgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIG5ld01pbnRSZWNpcGllbnQ6IGJ5dGVzMzIKCWNvbmNhdAoJZnJhbWVfZGlnIDQgLy8gX2Ftb3VudDogdWludDI1NgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyBfb3JpZ2luYWxNc2dCb2R5OiAodWludDMyLGJ5dGVbMzJdLGJ5dGVbMzJdLHVpbnQyNTYsYnl0ZVszMl0pCglleHRyYWN0IDEwMCAzMgoJY29uY2F0CglmcmFtZV9idXJ5IDUgLy8gbmV3TWVzc2FnZUJvZHk6IEJ1cm5NZXNzYWdlCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDM3CgkvLyBzZW5kTWV0aG9kQ2FsbDxbYnl0ZXMsIGJ5dGVzLCBieXRlcywgYnl0ZXMzMl0sIHZvaWQ+KHsKCS8vIAkJCWFwcGxpY2F0aW9uSUQ6IHRoaXMubG9jYWxNZXNzYWdlVHJhbnNtaXR0ZXIudmFsdWUsCgkvLyAJCQluYW1lOiAncmVwbGFjZU1lc3NhZ2UnLAoJLy8gCQkJbWV0aG9kQXJnczogWwoJLy8gCQkJCXJhd0J5dGVzKG9yaWdpbmFsTWVzc2FnZSksCgkvLyAJCQkJb3JpZ2luYWxBdHRlc3RhdGlvbiwKCS8vIAkJCQlyYXdCeXRlcyhuZXdNZXNzYWdlQm9keSksCgkvLyAJCQkJbmV3RGVzdGluYXRpb25DYWxsZXIKCS8vIAkJCV0KCS8vIAkJfSkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgInJlcGxhY2VNZXNzYWdlKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbMzJdKXZvaWQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQzOAoJLy8gYXBwbGljYXRpb25JRDogdGhpcy5sb2NhbE1lc3NhZ2VUcmFuc21pdHRlci52YWx1ZQoJYnl0ZSAweDZjNmY2MzYxNmM0ZDY1NzM3MzYxNjc2NTU0NzI2MTZlNzM2ZDY5NzQ3NDY1NzIgLy8gImxvY2FsTWVzc2FnZVRyYW5zbWl0dGVyIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQ0MAoJLy8gbWV0aG9kQXJnczogWwoJLy8gCQkJCXJhd0J5dGVzKG9yaWdpbmFsTWVzc2FnZSksCgkvLyAJCQkJb3JpZ2luYWxBdHRlc3RhdGlvbiwKCS8vIAkJCQlyYXdCeXRlcyhuZXdNZXNzYWdlQm9keSksCgkvLyAJCQkJbmV3RGVzdGluYXRpb25DYWxsZXIKCS8vIAkJCV0KCWZyYW1lX2RpZyAtMSAvLyBvcmlnaW5hbE1lc3NhZ2U6IGJ5dGVzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTIgLy8gb3JpZ2luYWxBdHRlc3RhdGlvbjogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIDUgLy8gbmV3TWVzc2FnZUJvZHk6IEJ1cm5NZXNzYWdlCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyBuZXdEZXN0aW5hdGlvbkNhbGxlcjogYnl0ZXMzMgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDQ4CgkvLyB0aGlzLkRlcG9zaXRGb3JCdXJuLmxvZyh7CgkvLyAJCQlub25jZTogX29yaWdpbmFsTXNnLl9tc2dOb25jZSwKCS8vIAkJCWJ1cm5Ub2tlbjogX2J1cm5Ub2tlbiwKCS8vIAkJCWFtb3VudDogX2Ftb3VudCwKCS8vIAkJCWRlcG9zaXRvcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gCQkJbWludFJlY2lwaWVudDogbmV3TWludFJlY2lwaWVudCwKCS8vIAkJCWRlc3RpbmF0aW9uRG9tYWluOiBfb3JpZ2luYWxNc2cuX21zZ0Rlc3RpbmF0aW9uRG9tYWluLAoJLy8gCQkJZGVzdGluYXRpb25Ub2tlbk1lc3NlbmdlcjogX29yaWdpbmFsTXNnLl9tc2dSZWNpcGllbnQsCgkvLyAJCQlkZXN0aW5hdGlvbkNhbGxlcjogbmV3RGVzdGluYXRpb25DYWxsZXIKCS8vIAkJfSkKCWJ5dGUgMHhkOTA3NGNhMSAvLyBEZXBvc2l0Rm9yQnVybih1aW50NjQsdWludDY0LHVpbnQyNTYsYWRkcmVzcyxieXRlWzMyXSx1aW50MzIsYnl0ZVszMl0sYnl0ZVszMl0pCglmcmFtZV9kaWcgMSAvLyBfb3JpZ2luYWxNc2c6ICh1aW50MzIsdWludDMyLHVpbnQzMix1aW50NjQsYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0pCglleHRyYWN0IDEyIDgKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAzIC8vIF9idXJuVG9rZW46IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyA0IC8vIF9hbW91bnQ6IHVpbnQyNTYKCWNvbmNhdAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgLTQgLy8gbmV3TWludFJlY2lwaWVudDogYnl0ZXMzMgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBfb3JpZ2luYWxNc2c6ICh1aW50MzIsdWludDMyLHVpbnQzMix1aW50NjQsYnl0ZVszMl0sYnl0ZVszMl0sYnl0ZVszMl0pCglleHRyYWN0IDggNAoJYnRvaQoJaXRvYgoJZXh0cmFjdCA0IDQKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gX29yaWdpbmFsTXNnOiAodWludDMyLHVpbnQzMix1aW50MzIsdWludDY0LGJ5dGVbMzJdLGJ5dGVbMzJdLGJ5dGVbMzJdKQoJZXh0cmFjdCA1MiAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbmV3RGVzdGluYXRpb25DYWxsZXI6IGJ5dGVzMzIKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gaGFuZGxlUmVjZWl2ZU1lc3NhZ2UodWludDMyLGJ5dGVbMzJdLGJ5dGVbXSlib29sCmFiaV9yb3V0ZV9oYW5kbGVSZWNlaXZlTWVzc2FnZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbWVzc2FnZUJvZHk6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBzZW5kZXI6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcmVtb3RlRG9tYWluOiB1aW50MzIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgNAoJPT0KCWFzc2VydAoJYnRvaQoKCS8vIGV4ZWN1dGUgaGFuZGxlUmVjZWl2ZU1lc3NhZ2UodWludDMyLGJ5dGVbMzJdLGJ5dGVbXSlib29sCgljYWxsc3ViIGhhbmRsZVJlY2VpdmVNZXNzYWdlCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGhhbmRsZVJlY2VpdmVNZXNzYWdlKHJlbW90ZURvbWFpbjogdWludDMyLCBzZW5kZXI6IGJ5dGVzMzIsIG1lc3NhZ2VCb2R5OiBieXRlcyk6IGJvb2xlYW4KLy8KLy8gQG5vdGljZSBIYW5kbGVzIGFuIGluY29taW5nIG1lc3NhZ2UgcmVjZWl2ZWQgYnkgdGhlIGxvY2FsIE1lc3NhZ2VUcmFuc21pdHRlciwKLy8gYW5kIHRha2VzIHRoZSBhcHByb3ByaWF0ZSBhY3Rpb24uIEZvciBhIGJ1cm4gbWVzc2FnZSwgbWludHMgdGhlCi8vIGFzc29jaWF0ZWQgdG9rZW4gdG8gdGhlIHJlcXVlc3RlZCByZWNpcGllbnQgb24gdGhlIGxvY2FsIGRvbWFpbi4KLy8gQGRldiBWYWxpZGF0ZXMgdGhlIGxvY2FsIHNlbmRlciBpcyB0aGUgbG9jYWwgTWVzc2FnZVRyYW5zbWl0dGVyLCBhbmQgdGhlCi8vIHJlbW90ZSBzZW5kZXIgaXMgYSByZWdpc3RlcmVkIHJlbW90ZSBUb2tlbk1lc3NlbmdlciBmb3IgYHJlbW90ZURvbWFpbmAuCi8vIEBwYXJhbSByZW1vdGVEb21haW4gVGhlIGRvbWFpbiB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVkIGZyb20uCi8vIEBwYXJhbSBzZW5kZXIgVGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSAocmVtb3RlIFRva2VuTWVzc2VuZ2VyKS4KLy8gQHBhcmFtIG1lc3NhZ2VCb2R5IFRoZSBtZXNzYWdlIGJvZHkgYnl0ZXMuCi8vIEByZXR1cm4gc3VjY2VzcyBCb29sLCB0cnVlIGlmIHN1Y2Nlc3NmdWwuCmhhbmRsZVJlY2VpdmVNZXNzYWdlOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo0NzYKCS8vIHRoaXMub25seUxvY2FsTWVzc2FnZVRyYW5zbWl0dGVyKCkKCWNhbGxzdWIgb25seUxvY2FsTWVzc2FnZVRyYW5zbWl0dGVyCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDc3CgkvLyB0aGlzLm9ubHlSZW1vdGVUb2tlbk1lc3NlbmdlcihyZW1vdGVEb21haW4sIHNlbmRlcikKCWZyYW1lX2RpZyAtMiAvLyBzZW5kZXI6IGJ5dGVzMzIKCWZyYW1lX2RpZyAtMSAvLyByZW1vdGVEb21haW46IHVpbnQzMgoJY2FsbHN1YiBvbmx5UmVtb3RlVG9rZW5NZXNzZW5nZXIKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo0NzkKCS8vIF9tZXNzYWdlQm9keSA9IGNhc3RCeXRlczxCdXJuTWVzc2FnZT4obWVzc2FnZUJvZHkpCglmcmFtZV9kaWcgLTMgLy8gbWVzc2FnZUJvZHk6IGJ5dGVzCglmcmFtZV9idXJ5IDAgLy8gX21lc3NhZ2VCb2R5OiAodWludDMyLGJ5dGVbMzJdLGJ5dGVbMzJdLHVpbnQyNTYsYnl0ZVszMl0pCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDgxCgkvLyBhc3NlcnQoX21lc3NhZ2VCb2R5Ll92ZXJzaW9uID09PSB0aGlzLm1lc3NhZ2VCb2R5VmVyc2lvbi52YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIF9tZXNzYWdlQm9keTogKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSx1aW50MjU2LGJ5dGVbMzJdKQoJZXh0cmFjdCAwIDQKCWJ0b2kKCWJ5dGUgMHg2ZDY1NzM3MzYxNjc2NTQyNmY2NDc5NTY2NTcyNzM2OTZmNmUgLy8gIm1lc3NhZ2VCb2R5VmVyc2lvbiIKCWFwcF9nbG9iYWxfZ2V0CglidG9pCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NDg1CgkvLyB0aGlzLl9taW50QW5kV2l0aGRyYXcoCgkvLyAJCQl0aGlzLl9nZXRMb2NhbE1pbnRlcigpLAoJLy8gCQkJcmVtb3RlRG9tYWluLAoJLy8gCQkJX21lc3NhZ2VCb2R5Ll9idXJuVG9rZW4sCgkvLyAJCQlBZGRyZXNzLmZyb21CeXRlcyhfbWVzc2FnZUJvZHkuX21pbnRSZWNpcGllbnQpLAoJLy8gCQkJZXh0cmFjdFVpbnQ2NChyYXdCeXRlcyhfbWVzc2FnZUJvZHkuX2Ftb3VudCksIDI0KQoJLy8gCQkpCglmcmFtZV9kaWcgMCAvLyBfbWVzc2FnZUJvZHk6ICh1aW50MzIsYnl0ZVszMl0sYnl0ZVszMl0sdWludDI1NixieXRlWzMyXSkKCWV4dHJhY3QgNjggMzIKCWludCAyNAoJZXh0cmFjdF91aW50NjQKCWZyYW1lX2RpZyAwIC8vIF9tZXNzYWdlQm9keTogKHVpbnQzMixieXRlWzMyXSxieXRlWzMyXSx1aW50MjU2LGJ5dGVbMzJdKQoJZXh0cmFjdCAzNiAzMgoJZnJhbWVfZGlnIDAgLy8gX21lc3NhZ2VCb2R5OiAodWludDMyLGJ5dGVbMzJdLGJ5dGVbMzJdLHVpbnQyNTYsYnl0ZVszMl0pCglleHRyYWN0IDQgMzIKCWZyYW1lX2RpZyAtMSAvLyByZW1vdGVEb21haW46IHVpbnQzMgoJY2FsbHN1YiBfZ2V0TG9jYWxNaW50ZXIKCWNhbGxzdWIgX21pbnRBbmRXaXRoZHJhdwoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjQ5MwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBhZGRSZW1vdGVUb2tlbk1lc3Nlbmdlcih1aW50MzIsYnl0ZVszMl0pdm9pZAphYmlfcm91dGVfYWRkUmVtb3RlVG9rZW5NZXNzZW5nZXI6CgkvLyB0b2tlbk1lc3NlbmdlcjogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBkb21haW46IHVpbnQzMgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCA0Cgk9PQoJYXNzZXJ0CglidG9pCgoJLy8gZXhlY3V0ZSBhZGRSZW1vdGVUb2tlbk1lc3Nlbmdlcih1aW50MzIsYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBhZGRSZW1vdGVUb2tlbk1lc3NlbmdlcgoJaW50IDEKCXJldHVybgoKLy8gYWRkUmVtb3RlVG9rZW5NZXNzZW5nZXIoZG9tYWluOiB1aW50MzIsIHRva2VuTWVzc2VuZ2VyOiBieXRlczMyKTogdm9pZAovLwovLyBAbm90aWNlIEFkZCB0aGUgVG9rZW5NZXNzZW5nZXIgZm9yIGEgcmVtb3RlIGRvbWFpbi4KLy8gQGRldiBSZXZlcnRzIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBUb2tlbk1lc3NlbmdlciBzZXQgZm9yIGRvbWFpbi4KLy8gQHBhcmFtIGRvbWFpbiBEb21haW4gb2YgcmVtb3RlIFRva2VuTWVzc2VuZ2VyLgovLyBAcGFyYW0gdG9rZW5NZXNzZW5nZXIgQWRkcmVzcyBvZiByZW1vdGUgVG9rZW5NZXNzZW5nZXIgYXMgYnl0ZXMzMi4KYWRkUmVtb3RlVG9rZW5NZXNzZW5nZXI6Cglwcm90byAyIDAKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1MDYKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTA4CgkvLyBhc3NlcnQodG9rZW5NZXNzZW5nZXIgIT09IGJ6ZXJvKDMyKSBhcyBieXRlczMyKQoJZnJhbWVfZGlnIC0yIC8vIHRva2VuTWVzc2VuZ2VyOiBieXRlczMyCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJIT0KCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjUwOQoJLy8gYXNzZXJ0KCF0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2Vycyhkb21haW4pLmV4aXN0cykKCWZyYW1lX2RpZyAtMSAvLyBkb21haW46IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTExCgkvLyB0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2Vycyhkb21haW4pLnZhbHVlID0gdG9rZW5NZXNzZW5nZXIKCWZyYW1lX2RpZyAtMSAvLyBkb21haW46IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWZyYW1lX2RpZyAtMiAvLyB0b2tlbk1lc3NlbmdlcjogYnl0ZXMzMgoJYm94X3B1dAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjUxMwoJLy8gdGhpcy5SZW1vdGVUb2tlbk1lc3NlbmdlckFkZGVkLmxvZyh7CgkvLyAJCQlkb21haW46IGRvbWFpbiwKCS8vIAkJCXRva2VuTWVzc2VuZ2VyOiB0b2tlbk1lc3NlbmdlcgoJLy8gCQl9KQoJYnl0ZSAweDBlMzMwNGQwIC8vIFJlbW90ZVRva2VuTWVzc2VuZ2VyQWRkZWQodWludDMyLGJ5dGVbMzJdKQoJZnJhbWVfZGlnIC0xIC8vIGRvbWFpbjogdWludDMyCglpdG9iCglleHRyYWN0IDQgNAoJZnJhbWVfZGlnIC0yIC8vIHRva2VuTWVzc2VuZ2VyOiBieXRlczMyCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHJlbW92ZVJlbW90ZVRva2VuTWVzc2VuZ2VyKHVpbnQzMil2b2lkCmFiaV9yb3V0ZV9yZW1vdmVSZW1vdGVUb2tlbk1lc3NlbmdlcjoKCS8vIGRvbWFpbjogdWludDMyCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDQKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBleGVjdXRlIHJlbW92ZVJlbW90ZVRva2VuTWVzc2VuZ2VyKHVpbnQzMil2b2lkCgljYWxsc3ViIHJlbW92ZVJlbW90ZVRva2VuTWVzc2VuZ2VyCglpbnQgMQoJcmV0dXJuCgovLyByZW1vdmVSZW1vdGVUb2tlbk1lc3Nlbmdlcihkb21haW46IHVpbnQzMik6IHZvaWQKLy8KLy8gQG5vdGljZSBSZW1vdmUgdGhlIFRva2VuTWVzc2VuZ2VyIGZvciBhIHJlbW90ZSBkb21haW4uCi8vIEBkZXYgUmV2ZXJ0cyBpZiB0aGVyZSBpcyBubyBUb2tlbk1lc3NlbmdlciBzZXQgZm9yIGBkb21haW5gLgovLyBAcGFyYW0gZG9tYWluIERvbWFpbiBvZiByZW1vdGUgVG9rZW5NZXNzZW5nZXIKcmVtb3ZlUmVtb3RlVG9rZW5NZXNzZW5nZXI6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjUyNwoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1MzAKCS8vIGFzc2VydCh0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2Vycyhkb21haW4pLmV4aXN0cykKCWZyYW1lX2RpZyAtMSAvLyBkb21haW46IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTMyCgkvLyBfcmVtb3ZlZFRva2VuTWVzc2VuZ2VyID0gdGhpcy5yZW1vdGVUb2tlbk1lc3NlbmdlcnMoZG9tYWluKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIGRvbWFpbjogdWludDMyCglpdG9iCglleHRyYWN0IDQgNAoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9fcmVtb3ZlZFRva2VuTWVzc2VuZ2VyCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTMzCgkvLyB0aGlzLnJlbW90ZVRva2VuTWVzc2VuZ2Vycyhkb21haW4pLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTEgLy8gZG9tYWluOiB1aW50MzIKCWl0b2IKCWV4dHJhY3QgNCA0Cglib3hfZGVsCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTM1CgkvLyB0aGlzLlJlbW90ZVRva2VuTWVzc2VuZ2VyUmVtb3ZlZC5sb2coewoJLy8gCQkJZG9tYWluOiBkb21haW4sCgkvLyAJCQl0b2tlbk1lc3NlbmdlcjogX3JlbW92ZWRUb2tlbk1lc3NlbmdlcgoJLy8gCQl9KQoJYnl0ZSAweDE1YjMxZWJmIC8vIFJlbW90ZVRva2VuTWVzc2VuZ2VyUmVtb3ZlZCh1aW50MzIsYnl0ZVszMl0pCglmcmFtZV9kaWcgLTEgLy8gZG9tYWluOiB1aW50MzIKCWl0b2IKCWV4dHJhY3QgNCA0CglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vX3JlbW92ZWRUb2tlbk1lc3NlbmdlcgoJYm94X2dldAoJYXNzZXJ0Cgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGFkZExvY2FsTWludGVyKGFwcGxpY2F0aW9uKXZvaWQKYWJpX3JvdXRlX2FkZExvY2FsTWludGVyOgoJLy8gbmV3TG9jYWxNaW50ZXI6IGFwcGxpY2F0aW9uCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBcHBsaWNhdGlvbnMKCgkvLyBleGVjdXRlIGFkZExvY2FsTWludGVyKGFwcGxpY2F0aW9uKXZvaWQKCWNhbGxzdWIgYWRkTG9jYWxNaW50ZXIKCWludCAxCglyZXR1cm4KCi8vIGFkZExvY2FsTWludGVyKG5ld0xvY2FsTWludGVyOiBBcHBsaWNhdGlvbik6IHZvaWQKLy8KLy8gQG5vdGljZSBBZGQgbWludGVyIGZvciB0aGUgbG9jYWwgZG9tYWluLgovLyBAZGV2IFJldmVydHMgaWYgYSBtaW50ZXIgaXMgYWxyZWFkeSBzZXQgZm9yIHRoZSBsb2NhbCBkb21haW4uCi8vIEBwYXJhbSBuZXdMb2NhbE1pbnRlciBUaGUgYWRkcmVzcyBvZiB0aGUgbWludGVyIG9uIHRoZSBsb2NhbCBkb21haW4uCmFkZExvY2FsTWludGVyOgoJcHJvdG8gMSAwCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTQ5CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjU1MQoJLy8gYXNzZXJ0KG5ld0xvY2FsTWludGVyKQoJZnJhbWVfZGlnIC0xIC8vIG5ld0xvY2FsTWludGVyOiBBcHBsaWNhdGlvbgoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTUyCgkvLyBhc3NlcnQoIXRoaXMubG9jYWxNaW50ZXIuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDZjNmY2MzYxNmM0ZDY5NmU3NDY1NzIgLy8gImxvY2FsTWludGVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTU0CgkvLyB0aGlzLmxvY2FsTWludGVyLnZhbHVlID0gbmV3TG9jYWxNaW50ZXIKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2OTZlNzQ2NTcyIC8vICJsb2NhbE1pbnRlciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdMb2NhbE1pbnRlcjogQXBwbGljYXRpb24KCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTU2CgkvLyB0aGlzLkxvY2FsTWludGVyQWRkZWQubG9nKHsKCS8vIAkJCWxvY2FsTWludGVyOiBuZXdMb2NhbE1pbnRlcgoJLy8gCQl9KQoJYnl0ZSAweDlmOWU1YzM1IC8vIExvY2FsTWludGVyQWRkZWQodWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIG5ld0xvY2FsTWludGVyOiBBcHBsaWNhdGlvbgoJaXRvYgoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gcmVtb3ZlTG9jYWxNaW50ZXIoKXZvaWQKYWJpX3JvdXRlX3JlbW92ZUxvY2FsTWludGVyOgoJLy8gZXhlY3V0ZSByZW1vdmVMb2NhbE1pbnRlcigpdm9pZAoJY2FsbHN1YiByZW1vdmVMb2NhbE1pbnRlcgoJaW50IDEKCXJldHVybgoKLy8gcmVtb3ZlTG9jYWxNaW50ZXIoKTogdm9pZAovLwovLyBAbm90aWNlIFJlbW92ZSB0aGUgbWludGVyIGZvciB0aGUgbG9jYWwgZG9tYWluLgovLyBAZGV2IFJldmVydHMgaWYgdGhlIG1pbnRlciBvZiB0aGUgbG9jYWwgZG9tYWluIGlzIG5vdCBzZXQuCnJlbW92ZUxvY2FsTWludGVyOgoJcHJvdG8gMCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1NjYKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTY4CgkvLyBfbG9jYWxNaW50ZXJBZGRyZXNzOiBBcHBsaWNhdGlvbiA9IHRoaXMubG9jYWxNaW50ZXIudmFsdWUKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2OTZlNzQ2NTcyIC8vICJsb2NhbE1pbnRlciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDAgLy8gX2xvY2FsTWludGVyQWRkcmVzczogQXBwbGljYXRpb24KCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1NjkKCS8vIGFzc2VydCh0aGlzLmxvY2FsTWludGVyLmV4aXN0cykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2OTZlNzQ2NTcyIC8vICJsb2NhbE1pbnRlciIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjU3MQoJLy8gdGhpcy5sb2NhbE1pbnRlci5kZWxldGUoKQoJYnl0ZSAweDZjNmY2MzYxNmM0ZDY5NmU3NDY1NzIgLy8gImxvY2FsTWludGVyIgoJYXBwX2dsb2JhbF9kZWwKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1NzMKCS8vIHRoaXMuTG9jYWxNaW50ZXJSZW1vdmVkLmxvZyh7CgkvLyAJCQlsb2NhbE1pbnRlcjogX2xvY2FsTWludGVyQWRkcmVzcwoJLy8gCQl9KQoJYnl0ZSAweGI4ODY5ZTU5IC8vIExvY2FsTWludGVyUmVtb3ZlZCh1aW50NjQpCglmcmFtZV9kaWcgMCAvLyBfbG9jYWxNaW50ZXJBZGRyZXNzOiBBcHBsaWNhdGlvbgoJaXRvYgoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZGVwbG95KGFwcGxpY2F0aW9uLHVpbnQzMil2b2lkCmFiaV9yb3V0ZV9kZXBsb3k6CgkvLyBfbWVzc2FnZUJvZHlWZXJzaW9uOiB1aW50MzIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgNAoJPT0KCWFzc2VydAoJYnRvaQoKCS8vIF9tZXNzYWdlVHJhbnNtaXR0ZXI6IGFwcGxpY2F0aW9uCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBcHBsaWNhdGlvbnMKCgkvLyBleGVjdXRlIGRlcGxveShhcHBsaWNhdGlvbix1aW50MzIpdm9pZAoJY2FsbHN1YiBkZXBsb3kKCWludCAxCglyZXR1cm4KCi8vIGRlcGxveShfbWVzc2FnZVRyYW5zbWl0dGVyOiBBcHBsaWNhdGlvbiwgX21lc3NhZ2VCb2R5VmVyc2lvbjogdWludDMyKTogdm9pZAovLwovLyBAcGFyYW0gX21lc3NhZ2VUcmFuc21pdHRlciBNZXNzYWdlIHRyYW5zbWl0dGVyIGFkZHJlc3MKLy8gQHBhcmFtIF9tZXNzYWdlQm9keVZlcnNpb24gTWVzc2FnZSBib2R5IHZlcnNpb24KZGVwbG95OgoJcHJvdG8gMiAwCgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTg5CgkvLyBhc3NlcnQoX21lc3NhZ2VUcmFuc21pdHRlcikKCWZyYW1lX2RpZyAtMSAvLyBfbWVzc2FnZVRyYW5zbWl0dGVyOiBBcHBsaWNhdGlvbgoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWVzc2VuZ2VyLmFsZ28udHM6NTkyCgkvLyB0aGlzLl90cmFuc2Zlck93bmVyc2hpcCh0aGlzLnR4bi5zZW5kZXIpCgl0eG4gU2VuZGVyCgljYWxsc3ViIF90cmFuc2Zlck93bmVyc2hpcAoKCS8vIHNyYy9Ub2tlbk1lc3Nlbmdlci5hbGdvLnRzOjU5NAoJLy8gdGhpcy5sb2NhbE1lc3NhZ2VUcmFuc21pdHRlci52YWx1ZSA9IF9tZXNzYWdlVHJhbnNtaXR0ZXIKCWJ5dGUgMHg2YzZmNjM2MTZjNGQ2NTczNzM2MTY3NjU1NDcyNjE2ZTczNmQ2OTc0NzQ2NTcyIC8vICJsb2NhbE1lc3NhZ2VUcmFuc21pdHRlciIKCWZyYW1lX2RpZyAtMSAvLyBfbWVzc2FnZVRyYW5zbWl0dGVyOiBBcHBsaWNhdGlvbgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvVG9rZW5NZXNzZW5nZXIuYWxnby50czo1OTUKCS8vIHRoaXMubWVzc2FnZUJvZHlWZXJzaW9uLnZhbHVlID0gX21lc3NhZ2VCb2R5VmVyc2lvbgoJYnl0ZSAweDZkNjU3MzczNjE2NzY1NDI2ZjY0Nzk1NjY1NzI3MzY5NmY2ZSAvLyAibWVzc2FnZUJvZHlWZXJzaW9uIgoJZnJhbWVfZGlnIC0yIC8vIF9tZXNzYWdlQm9keVZlcnNpb246IHVpbnQzMgoJaXRvYgoJZXh0cmFjdCA0IDQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJkZXBsb3koYXBwbGljYXRpb24sdWludDMyKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfZGVwbG95CgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAib3duZXIoKWFkZHJlc3MiCgltZXRob2QgIl9jaGVja093bmVyKCl2b2lkIgoJbWV0aG9kICJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQiCgltZXRob2QgInBlbmRpbmdPd25lcigpYWRkcmVzcyIKCW1ldGhvZCAidHJhbnNmZXJPd25lcnNoaXAyUyhhZGRyZXNzKXZvaWQiCgltZXRob2QgImFjY2VwdE93bmVyc2hpcCgpdm9pZCIKCW1ldGhvZCAiZGVwb3NpdEZvckJ1cm4oYXhmZXIsdWludDMyLGJ5dGVbMzJdLGFzc2V0KXVpbnQ2NCIKCW1ldGhvZCAiZGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyKGF4ZmVyLHVpbnQzMixieXRlWzMyXSxhc3NldCxieXRlWzMyXSl1aW50NjQiCgltZXRob2QgInJlcGxhY2VEZXBvc2l0Rm9yQnVybihieXRlW10sYnl0ZVtdLGJ5dGVbMzJdLGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgImhhbmRsZVJlY2VpdmVNZXNzYWdlKHVpbnQzMixieXRlWzMyXSxieXRlW10pYm9vbCIKCW1ldGhvZCAiYWRkUmVtb3RlVG9rZW5NZXNzZW5nZXIodWludDMyLGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgInJlbW92ZVJlbW90ZVRva2VuTWVzc2VuZ2VyKHVpbnQzMil2b2lkIgoJbWV0aG9kICJhZGRMb2NhbE1pbnRlcihhcHBsaWNhdGlvbil2b2lkIgoJbWV0aG9kICJyZW1vdmVMb2NhbE1pbnRlcigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9vd25lciBhYmlfcm91dGVfX2NoZWNrT3duZXIgYWJpX3JvdXRlX3RyYW5zZmVyT3duZXJzaGlwIGFiaV9yb3V0ZV9wZW5kaW5nT3duZXIgYWJpX3JvdXRlX3RyYW5zZmVyT3duZXJzaGlwMlMgYWJpX3JvdXRlX2FjY2VwdE93bmVyc2hpcCBhYmlfcm91dGVfZGVwb3NpdEZvckJ1cm4gYWJpX3JvdXRlX2RlcG9zaXRGb3JCdXJuV2l0aENhbGxlciBhYmlfcm91dGVfcmVwbGFjZURlcG9zaXRGb3JCdXJuIGFiaV9yb3V0ZV9oYW5kbGVSZWNlaXZlTWVzc2FnZSBhYmlfcm91dGVfYWRkUmVtb3RlVG9rZW5NZXNzZW5nZXIgYWJpX3JvdXRlX3JlbW92ZVJlbW90ZVRva2VuTWVzc2VuZ2VyIGFiaV9yb3V0ZV9hZGRMb2NhbE1pbnRlciBhYmlfcm91dGVfcmVtb3ZlTG9jYWxNaW50ZXIKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TokenMessenger",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "desc": "@devReturns the address of the current owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "_checkOwner",
        "desc": "@devThrows if the sender is not the owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "@devTransfers ownership of the application to a new account (`newOwner`).Can only be called by the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pendingOwner",
        "desc": "@devReturns the address of the pending owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership2S",
        "desc": "@devStarts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.Can only be called by the current owner.FIX: Once overrides exist, rename to transferOwnership",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "OwnershipTransferStarted",
            "args": [
              {
                "name": "previousAddress",
                "type": "address"
              },
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "acceptOwnership",
        "desc": "@devThe new owner accepts the ownership transfer.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "depositForBurn",
        "desc": "@noticeDeposits and burns tokens from sender to be minted on destination domain.Emits a`DepositForBurn`event.@devreverts if:- given burnToken is not supported- given destinationDomain has no TokenMessenger registered- transferFrom() reverts. For example, if sender's burnToken balance or approved allowanceto this contract is less than`amount`.- burn() reverts. For example, if`amount`is 0.- MessageTransmitter returns false or reverts.",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "asset transfer of tokens to burn"
          },
          {
            "name": "destinationDomain",
            "type": "uint32",
            "desc": "destination domain"
          },
          {
            "name": "mintRecipient",
            "type": "byte[32]",
            "desc": "address of mint recipient on destination domain"
          },
          {
            "name": "burnToken",
            "type": "asset",
            "desc": "address of contract to burn deposited tokens, on local domain@return_nonce unique nonce reserved by message"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "depositForBurnWithCaller",
        "desc": "@noticeDeposits and burns tokens from sender to be minted on destination domain. The minton the destination domain must be called by`destinationCaller`.WARNING: if the`destinationCaller`does not represent a valid address as bytes32, then it will not be possibleto broadcast the message on the destination domain. This is an advanced feature, and the standarddepositForBurn() should be preferred for use cases where a specific destination caller is not required.Emits a`DepositForBurn`event.@devreverts if:- given destinationCaller is zero address- given burnToken is not supported- given destinationDomain has no TokenMessenger registered- transferFrom() reverts. For example, if sender's burnToken balance or approved allowanceto this contract is less than`amount`.- burn() reverts. For example, if`amount`is 0.- MessageTransmitter returns false or reverts.",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "amount of tokens to burn (must be non-zero)"
          },
          {
            "name": "destinationDomain",
            "type": "uint32",
            "desc": "destination domain"
          },
          {
            "name": "mintRecipient",
            "type": "byte[32]",
            "desc": "address of mint recipient on destination domain"
          },
          {
            "name": "burnToken",
            "type": "asset",
            "desc": "address of contract to burn deposited tokens, on local domain"
          },
          {
            "name": "destinationCaller",
            "type": "byte[32]",
            "desc": "caller on the destination domain, as bytes32@returnnonce unique nonce reserved by message"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "replaceDepositForBurn",
        "desc": "@noticeReplace a BurnMessage to change the mint recipient and/ordestination caller. Allows the sender of a previous BurnMessage(created by depositForBurn or depositForBurnWithCaller)to send a new BurnMessage to replace the original.The new BurnMessage will reuse the amount and burn token of the original,without requiring a new deposit.@devThe new message will reuse the original message's nonce. For agiven nonce, all replacement message(s) and the original message arevalid to broadcast on the destination domain, until the first messageat the nonce confirms, at which point all others are invalidated.Note: The msg.sender of the replaced message must be the same as themsg.sender of the original message.",
        "args": [
          {
            "name": "originalMessage",
            "type": "byte[]",
            "desc": "original message bytes (to replace)"
          },
          {
            "name": "originalAttestation",
            "type": "byte[]",
            "desc": "original attestation bytes"
          },
          {
            "name": "newDestinationCaller",
            "type": "byte[32]",
            "desc": "the new destination caller, which may be thesame as the original destination caller, a new destination caller, or an emptydestination caller (bytes32(0), indicating that any destination caller is valid.)"
          },
          {
            "name": "newMintRecipient",
            "type": "byte[32]",
            "desc": "the new mint recipient, which may be the same as theoriginal mint recipient, or different."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "DepositForBurn",
            "args": [
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Unique nonce reserved by message"
              },
              {
                "name": "burnToken",
                "type": "uint64",
                "desc": "Asset ID of token burnt on source domain"
              },
              {
                "name": "amount",
                "type": "uint256",
                "desc": "Deposit amount"
              },
              {
                "name": "depositor",
                "type": "address",
                "desc": "Address where deposit is transferred from"
              },
              {
                "name": "mintRecipient",
                "type": "byte[32]",
                "desc": "Address receiving minted tokens on destination domain as bytes32"
              },
              {
                "name": "destinationDomain",
                "type": "uint32",
                "desc": "Destination domain"
              },
              {
                "name": "destinationTokenMessenger",
                "type": "byte[32]",
                "desc": "Address of TokenMessenger on destination domain as bytes32"
              },
              {
                "name": "destinationCaller",
                "type": "byte[32]",
                "desc": "Authorized caller as bytes32 of receiveMessage() on destination\ndomain, if not equal to bytes32(0). If equal to bytes32(0), any\naddress can call receiveMessage()."
              }
            ],
            "desc": "Emitted when a DepositForBurn message is sent"
          }
        ]
      },
      {
        "name": "handleReceiveMessage",
        "desc": "@noticeHandles an incoming message received by the local MessageTransmitter,and takes the appropriate action. For a burn message, mints theassociated token to the requested recipient on the local domain.@devValidates the local sender is the local MessageTransmitter, and theremote sender is a registered remote TokenMessenger for`remoteDomain`.",
        "args": [
          {
            "name": "remoteDomain",
            "type": "uint32",
            "desc": "The domain where the message originated from."
          },
          {
            "name": "sender",
            "type": "byte[32]",
            "desc": "The sender of the message (remote TokenMessenger)."
          },
          {
            "name": "messageBody",
            "type": "byte[]",
            "desc": "The message body bytes.@returnsuccess Bool, true if successful."
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "addRemoteTokenMessenger",
        "desc": "@noticeAdd the TokenMessenger for a remote domain.@devReverts if there is already a TokenMessenger set for domain.",
        "args": [
          {
            "name": "domain",
            "type": "uint32",
            "desc": "Domain of remote TokenMessenger."
          },
          {
            "name": "tokenMessenger",
            "type": "byte[32]",
            "desc": "Address of remote TokenMessenger as bytes32."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "RemoteTokenMessengerAdded",
            "args": [
              {
                "name": "domain",
                "type": "uint32",
                "desc": "Remote domain"
              },
              {
                "name": "tokenMessenger",
                "type": "byte[32]",
                "desc": "TokenMessenger on remote domain"
              }
            ],
            "desc": "Emitted when a remote TokenMessenger is added"
          }
        ]
      },
      {
        "name": "removeRemoteTokenMessenger",
        "desc": "@noticeRemove the TokenMessenger for a remote domain.@devReverts if there is no TokenMessenger set for`domain`.",
        "args": [
          {
            "name": "domain",
            "type": "uint32",
            "desc": "Domain of remote TokenMessenger"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "RemoteTokenMessengerRemoved",
            "args": [
              {
                "name": "domain",
                "type": "uint32",
                "desc": "Remote domain"
              },
              {
                "name": "tokenMessenger",
                "type": "byte[32]",
                "desc": "TokenMessenger on remote domain"
              }
            ],
            "desc": "Emitted when a remote TokenMessenger is removed"
          }
        ]
      },
      {
        "name": "addLocalMinter",
        "desc": "@noticeAdd minter for the local domain.@devReverts if a minter is already set for the local domain.",
        "args": [
          {
            "name": "newLocalMinter",
            "type": "application",
            "desc": "The address of the minter on the local domain."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalMinterAdded",
            "args": [
              {
                "name": "localMinter",
                "type": "uint64",
                "desc": "Address of local minter"
              }
            ],
            "desc": "Emitted when the local minter is added"
          }
        ]
      },
      {
        "name": "removeLocalMinter",
        "desc": "@noticeRemove the minter for the local domain.@devReverts if the minter of the local domain is not set.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalMinterRemoved",
            "args": [
              {
                "name": "localMinter",
                "type": "uint64",
                "desc": "Address of local minter"
              }
            ],
            "desc": "Emitted when the local minter is removed"
          }
        ]
      },
      {
        "name": "deploy",
        "args": [
          {
            "name": "_messageTransmitter",
            "type": "application",
            "desc": "Message transmitter address"
          },
          {
            "name": "_messageBodyVersion",
            "type": "uint32",
            "desc": "Message body version"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "oldAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "OwnershipTransferStarted",
        "args": [
          {
            "name": "previousAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "DepositForBurn",
        "args": [
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Unique nonce reserved by message"
          },
          {
            "name": "burnToken",
            "type": "uint64",
            "desc": "Asset ID of token burnt on source domain"
          },
          {
            "name": "amount",
            "type": "uint256",
            "desc": "Deposit amount"
          },
          {
            "name": "depositor",
            "type": "address",
            "desc": "Address where deposit is transferred from"
          },
          {
            "name": "mintRecipient",
            "type": "byte[32]",
            "desc": "Address receiving minted tokens on destination domain as bytes32"
          },
          {
            "name": "destinationDomain",
            "type": "uint32",
            "desc": "Destination domain"
          },
          {
            "name": "destinationTokenMessenger",
            "type": "byte[32]",
            "desc": "Address of TokenMessenger on destination domain as bytes32"
          },
          {
            "name": "destinationCaller",
            "type": "byte[32]",
            "desc": "Authorized caller as bytes32 of receiveMessage() on destination\ndomain, if not equal to bytes32(0). If equal to bytes32(0), any\naddress can call receiveMessage()."
          }
        ],
        "desc": "Emitted when a DepositForBurn message is sent"
      },
      {
        "name": "MintAndWithdraw",
        "args": [
          {
            "name": "mintRecipient",
            "type": "address",
            "desc": "Recipient address of minted tokens"
          },
          {
            "name": "amount",
            "type": "uint256",
            "desc": "Amount of minted tokens"
          },
          {
            "name": "mintToken",
            "type": "uint64",
            "desc": "Asset ID of minted token"
          }
        ],
        "desc": "Emitted when tokens are minted"
      },
      {
        "name": "RemoteTokenMessengerAdded",
        "args": [
          {
            "name": "domain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "tokenMessenger",
            "type": "byte[32]",
            "desc": "TokenMessenger on remote domain"
          }
        ],
        "desc": "Emitted when a remote TokenMessenger is added"
      },
      {
        "name": "RemoteTokenMessengerRemoved",
        "args": [
          {
            "name": "domain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "tokenMessenger",
            "type": "byte[32]",
            "desc": "TokenMessenger on remote domain"
          }
        ],
        "desc": "Emitted when a remote TokenMessenger is removed"
      },
      {
        "name": "LocalMinterAdded",
        "args": [
          {
            "name": "localMinter",
            "type": "uint64",
            "desc": "Address of local minter"
          }
        ],
        "desc": "Emitted when the local minter is added"
      },
      {
        "name": "LocalMinterRemoved",
        "args": [
          {
            "name": "localMinter",
            "type": "uint64",
            "desc": "Address of local minter"
          }
        ],
        "desc": "Emitted when the local minter is removed"
      }
    ]
  }
}