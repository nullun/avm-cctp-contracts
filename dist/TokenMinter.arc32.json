{
  "hints": {
    "tokenController()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkTokenPair(asset,uint32,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unlinkTokenPair(asset,uint32,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setMaxBurnAmountPerMessage(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "_checkOwner()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pendingOwner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership2S(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptOwnership()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauser()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePauser(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "mint(uint32,byte[32],address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLocalTokenMessenger(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLocalTokenMessenger()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTokenController(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLocalToken(uint32,byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_tokenController": {
          "type": "bytes",
          "key": "_tokenController"
        },
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pendingOwner": {
          "type": "bytes",
          "key": "_pendingOwner"
        },
        "_pauser": {
          "type": "bytes",
          "key": "_pauser"
        },
        "paused": {
          "type": "bytes",
          "key": "paused"
        },
        "localTokenMessenger": {
          "type": "uint64",
          "key": "localTokenMessenger"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjc3LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBvbmx5VG9rZW5Db250cm9sbGVyKCk6IHZvaWQKLy8KLy8gQGRldiBUaHJvd3MgaWYgY2FsbGVkIGJ5IGFueSBhY2NvdW50IG90aGVyIHRoYW4gdGhlIHRva2VuQ29udHJvbGxlci4Kb25seVRva2VuQ29udHJvbGxlcjoKCXByb3RvIDAgMAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czo3NQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fdG9rZW5Db250cm9sbGVyLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDVmNzQ2ZjZiNjU2ZTQzNmY2ZTc0NzI2ZjZjNmM2NTcyIC8vICJfdG9rZW5Db250cm9sbGVyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gb25seVdpdGhpbkJ1cm5MaW1pdCh0b2tlbjogQXNzZXQsIGFtb3VudDogdWludDw2ND4pOiB2b2lkCi8vCi8vIEBub3RpY2UgZW5zdXJlcyB0aGF0IGF0dGVtcHRlZCBidXJuIGRvZXMgbm90IGV4Y2VlZAovLyBidXJuIGxpbWl0IHBlci1tZXNzYWdlIGZvciBnaXZlbiBgYnVyblRva2VuYC4KLy8gQGRldiByZXZlcnRzIGlmIGFsbG93ZWQgYnVybiBhbW91bnQgaXMgMCwgb3IgYnVybkFtb3VudCBleGNlZWRzCi8vIGFsbG93ZWQgYnVybiBhbW91bnQuCi8vIEBwYXJhbSB0b2tlbiBpZCBvZiB0b2tlbiB0byBidXJuCi8vIEBwYXJhbSBhbW91bnQgYW1vdW50IG9mIGB0b2tlbmAgdG8gYnVybgpvbmx5V2l0aGluQnVybkxpbWl0OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6OTAKCS8vIF9hbGxvd2VkQnVybkFtb3VudDogdWludDw2ND4gPSB0aGlzLmJ1cm5MaW1pdHNQZXJNZXNzYWdlKHRva2VuKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIHRva2VuOiBBc3NldAoJaXRvYgoJYm94X2dldAoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDAgLy8gX2FsbG93ZWRCdXJuQW1vdW50OiB1aW50PDY0PgoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czo5MgoJLy8gYXNzZXJ0KF9hbGxvd2VkQnVybkFtb3VudCkKCWZyYW1lX2RpZyAwIC8vIF9hbGxvd2VkQnVybkFtb3VudDogdWludDw2ND4KCWFzc2VydAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czo5MwoJLy8gYXNzZXJ0KGFtb3VudCA8PSBfYWxsb3dlZEJ1cm5BbW91bnQpCglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50PDY0PgoJZnJhbWVfZGlnIDAgLy8gX2FsbG93ZWRCdXJuQW1vdW50OiB1aW50PDY0PgoJPD0KCWFzc2VydAoJcmV0c3ViCgovLyB0b2tlbkNvbnRyb2xsZXIoKWFkZHJlc3MKYWJpX3JvdXRlX3Rva2VuQ29udHJvbGxlcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSB0b2tlbkNvbnRyb2xsZXIoKWFkZHJlc3MKCWNhbGxzdWIgdG9rZW5Db250cm9sbGVyCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gdG9rZW5Db250cm9sbGVyKCk6IEFkZHJlc3MKLy8KLy8gQGRldiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbkNvbnRyb2xsZXIKLy8gQHJldHVybiBhZGRyZXNzIG9mIHRoZSB0b2tlbkNvbnRyb2xsZXIKdG9rZW5Db250cm9sbGVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjEwNAoJLy8gcmV0dXJuIHRoaXMuX3Rva2VuQ29udHJvbGxlci52YWx1ZTsKCWJ5dGUgMHg1Zjc0NmY2YjY1NmU0MzZmNmU3NDcyNmY2YzZjNjU3MiAvLyAiX3Rva2VuQ29udHJvbGxlciIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGxpbmtUb2tlblBhaXIoYXNzZXQsdWludDMyLGJ5dGVbMzJdKXZvaWQKYWJpX3JvdXRlX2xpbmtUb2tlblBhaXI6CgkvLyByZW1vdGVUb2tlbjogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyByZW1vdGVEb21haW46IHVpbnQzMgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCA0Cgk9PQoJYXNzZXJ0CglidG9pCgoJLy8gbG9jYWxUb2tlbjogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgbGlua1Rva2VuUGFpcihhc3NldCx1aW50MzIsYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBsaW5rVG9rZW5QYWlyCglpbnQgMQoJcmV0dXJuCgovLyBsaW5rVG9rZW5QYWlyKGxvY2FsVG9rZW46IEFzc2V0LCByZW1vdGVEb21haW46IHVpbnQ8MzI+LCByZW1vdGVUb2tlbjogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQG5vdGljZSBMaW5rcyBhIHBhaXIgb2YgbG9jYWwgYW5kIHJlbW90ZSB0b2tlbnMgdG8gYmUgc3VwcG9ydGVkIGJ5IHRoaXMgVG9rZW5NaW50ZXIuCi8vIEBkZXYgQXNzb2NpYXRlcyBhIChgcmVtb3RlVG9rZW5gLCBgbG9jYWxUb2tlbmApIHBhaXIgYnkgdXBkYXRpbmcgcmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyBtYXBwaW5nLgovLyBSZXZlcnRzIGlmIHRoZSByZW1vdGUgdG9rZW4gKGZvciB0aGUgZ2l2ZW4gYHJlbW90ZURvbWFpbmApIGFscmVhZHkgbWFwcyB0byBhIG5vbnplcm8gbG9jYWwgdG9rZW4uCi8vIE5vdGU6Ci8vIC0gQSByZW1vdGUgdG9rZW4gKG9uIGEgY2VydGFpbiByZW1vdGUgZG9tYWluKSBjYW4gb25seSBtYXAgdG8gb25lIGxvY2FsIHRva2VuLCBidXQgbWFueSByZW1vdGUgdG9rZW5zCi8vIGNhbiBtYXAgdG8gdGhlIHNhbWUgbG9jYWwgdG9rZW4uCi8vIC0gU2V0dGluZyBhIHRva2VuIHBhaXIgZG9lcyBub3QgZW5hYmxlIHRoZSBgbG9jYWxUb2tlbmAgKHRoYXQgcmVxdWlyZXMgY2FsbGluZyBzZXRMb2NhbFRva2VuRW5hYmxlZFN0YXR1cy4pCmxpbmtUb2tlblBhaXI6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxMjMKCS8vIHRoaXMub25seVRva2VuQ29udHJvbGxlcigpCgljYWxsc3ViIG9ubHlUb2tlbkNvbnRyb2xsZXIKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6MTI2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAJCQl4ZmVyQXNzZXQ6IGxvY2FsVG9rZW4sCgkvLyAJCQlhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gCQkJYXNzZXRBbW91bnQ6IDAKCS8vIAkJfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxMjcKCS8vIHhmZXJBc3NldDogbG9jYWxUb2tlbgoJZnJhbWVfZGlnIC0xIC8vIGxvY2FsVG9rZW46IEFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxMjgKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6MTI5CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjEzMgoJLy8gX3JlbW90ZVRva2Vuc0tleTogYnl0ZXMzMiA9IHRoaXMuX2hhc2hSZW1vdGVEb21haW5BbmRUb2tlbigKCS8vIAkJCXJlbW90ZURvbWFpbiwKCS8vIAkJCXJlbW90ZVRva2VuCgkvLyAJCSkKCWZyYW1lX2RpZyAtMyAvLyByZW1vdGVUb2tlbjogYnl0ZXMzMgoJZnJhbWVfZGlnIC0yIC8vIHJlbW90ZURvbWFpbjogdWludDwzMj4KCWNhbGxzdWIgX2hhc2hSZW1vdGVEb21haW5BbmRUb2tlbgoJZnJhbWVfYnVyeSAwIC8vIF9yZW1vdGVUb2tlbnNLZXk6IGJ5dGVzMzIKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6MTM4CgkvLyBhc3NlcnQoIXRoaXMucmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyhfcmVtb3RlVG9rZW5zS2V5KS5leGlzdHMpCglmcmFtZV9kaWcgMCAvLyBfcmVtb3RlVG9rZW5zS2V5OiBieXRlczMyCglib3hfbGVuCglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxNDAKCS8vIHRoaXMucmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyhfcmVtb3RlVG9rZW5zS2V5KS52YWx1ZSA9IGxvY2FsVG9rZW4KCWZyYW1lX2RpZyAwIC8vIF9yZW1vdGVUb2tlbnNLZXk6IGJ5dGVzMzIKCWZyYW1lX2RpZyAtMSAvLyBsb2NhbFRva2VuOiBBc3NldAoJaXRvYgoJYm94X3B1dAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxNDIKCS8vIHRoaXMuVG9rZW5QYWlyTGlua2VkLmxvZyh7CgkvLyAJCQlsb2NhbFRva2VuOiBsb2NhbFRva2VuLAoJLy8gCQkJcmVtb3RlRG9tYWluOiByZW1vdGVEb21haW4sCgkvLyAJCQlyZW1vdGVUb2tlbjogcmVtb3RlVG9rZW4KCS8vIAkJfSkKCWJ5dGUgMHgyMGFjZjM3MCAvLyBUb2tlblBhaXJMaW5rZWQodWludDY0LHVpbnQzMixieXRlWzMyXSkKCWZyYW1lX2RpZyAtMSAvLyBsb2NhbFRva2VuOiBBc3NldAoJaXRvYgoJZnJhbWVfZGlnIC0yIC8vIHJlbW90ZURvbWFpbjogdWludDwzMj4KCWl0b2IKCWV4dHJhY3QgNCA0Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyByZW1vdGVUb2tlbjogYnl0ZXMzMgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB1bmxpbmtUb2tlblBhaXIoYXNzZXQsdWludDMyLGJ5dGVbMzJdKXZvaWQKYWJpX3JvdXRlX3VubGlua1Rva2VuUGFpcjoKCS8vIHJlbW90ZVRva2VuOiBieXRlWzMyXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHJlbW90ZURvbWFpbjogdWludDMyCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDQKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBsb2NhbFRva2VuOiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gZXhlY3V0ZSB1bmxpbmtUb2tlblBhaXIoYXNzZXQsdWludDMyLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgdW5saW5rVG9rZW5QYWlyCglpbnQgMQoJcmV0dXJuCgovLyB1bmxpbmtUb2tlblBhaXIobG9jYWxUb2tlbjogQXNzZXQsIHJlbW90ZURvbWFpbjogdWludDwzMj4sIHJlbW90ZVRva2VuOiBieXRlczMyKTogdm9pZAovLwovLyBAbm90aWNlIFVubGlua3MgYSBwYWlyIG9mIGxvY2FsIGFuZCByZW1vdGUgdG9rZW5zIGZvciB0aGlzIFRva2VuTWludGVyLgovLyBAZGV2IFJlbW92ZXMgbGluayBmcm9tIGByZW1vdGVUb2tlbmAsIHRvIGBsb2NhbFRva2VuYCBmb3IgZ2l2ZW4gYHJlbW90ZURvbWFpbmAKLy8gYnkgdXBkYXRpbmcgcmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyBtYXBwaW5nLgovLyBSZXZlcnRzIGlmIHRoZSByZW1vdGUgdG9rZW4gKGZvciB0aGUgZ2l2ZW4gYHJlbW90ZURvbWFpbmApIGFscmVhZHkgbWFwcyB0byB0aGUgemVybyBhZGRyZXNzLgovLyBOb3RlOgovLyAtIEEgcmVtb3RlIHRva2VuIChvbiBhIGNlcnRhaW4gcmVtb3RlIGRvbWFpbikgY2FuIG9ubHkgbWFwIHRvIG9uZSBsb2NhbCB0b2tlbiwgYnV0IG1hbnkgcmVtb3RlIHRva2VucwovLyBjYW4gbWFwIHRvIHRoZSBzYW1lIGxvY2FsIHRva2VuLgovLyAtIFVubGlua2luZyBhIHRva2VuIHBhaXIgZG9lcyBub3QgZGlzYWJsZSBidXJuaW5nIHRoZSBgbG9jYWxUb2tlbmAgKHRoYXQgcmVxdWlyZXMgY2FsbGluZyBzZXRNYXhCdXJuQW1vdW50UGVyTWVzc2FnZS4pCnVubGlua1Rva2VuUGFpcjoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjE2NAoJLy8gdGhpcy5vbmx5VG9rZW5Db250cm9sbGVyKCkKCWNhbGxzdWIgb25seVRva2VuQ29udHJvbGxlcgoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxNjgKCS8vIF9yZW1vdGVUb2tlbnNLZXk6IGJ5dGVzMzIgPSB0aGlzLl9oYXNoUmVtb3RlRG9tYWluQW5kVG9rZW4oCgkvLyAJCQlyZW1vdGVEb21haW4sCgkvLyAJCQlyZW1vdGVUb2tlbgoJLy8gCQkpCglmcmFtZV9kaWcgLTMgLy8gcmVtb3RlVG9rZW46IGJ5dGVzMzIKCWZyYW1lX2RpZyAtMiAvLyByZW1vdGVEb21haW46IHVpbnQ8MzI+CgljYWxsc3ViIF9oYXNoUmVtb3RlRG9tYWluQW5kVG9rZW4KCWZyYW1lX2J1cnkgMCAvLyBfcmVtb3RlVG9rZW5zS2V5OiBieXRlczMyCgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjE3NAoJLy8gYXNzZXJ0KHRoaXMucmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyhfcmVtb3RlVG9rZW5zS2V5KS5leGlzdHMpCglmcmFtZV9kaWcgMCAvLyBfcmVtb3RlVG9rZW5zS2V5OiBieXRlczMyCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxNzYKCS8vIHRoaXMucmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyhfcmVtb3RlVG9rZW5zS2V5KS5kZWxldGUoKQoJZnJhbWVfZGlnIDAgLy8gX3JlbW90ZVRva2Vuc0tleTogYnl0ZXMzMgoJYm94X2RlbAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoxNzgKCS8vIHRoaXMuVG9rZW5QYWlyVW5saW5rZWQubG9nKHsKCS8vIAkJCWxvY2FsVG9rZW46IGxvY2FsVG9rZW4sCgkvLyAJCQlyZW1vdGVEb21haW46IHJlbW90ZURvbWFpbiwKCS8vIAkJCXJlbW90ZVRva2VuOiByZW1vdGVUb2tlbgoJLy8gCQl9KQoJYnl0ZSAweDcwNGFiZDM4IC8vIFRva2VuUGFpclVubGlua2VkKHVpbnQ2NCx1aW50MzIsYnl0ZVszMl0pCglmcmFtZV9kaWcgLTEgLy8gbG9jYWxUb2tlbjogQXNzZXQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyByZW1vdGVEb21haW46IHVpbnQ8MzI+CglpdG9iCglleHRyYWN0IDQgNAoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gcmVtb3RlVG9rZW46IGJ5dGVzMzIKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gc2V0TWF4QnVybkFtb3VudFBlck1lc3NhZ2UoYXNzZXQsdWludDY0KXZvaWQKYWJpX3JvdXRlX3NldE1heEJ1cm5BbW91bnRQZXJNZXNzYWdlOgoJLy8gYnVybkxpbWl0UGVyTWVzc2FnZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gbG9jYWxUb2tlbjogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgc2V0TWF4QnVybkFtb3VudFBlck1lc3NhZ2UoYXNzZXQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0TWF4QnVybkFtb3VudFBlck1lc3NhZ2UKCWludCAxCglyZXR1cm4KCi8vIHNldE1heEJ1cm5BbW91bnRQZXJNZXNzYWdlKGxvY2FsVG9rZW46IEFzc2V0LCBidXJuTGltaXRQZXJNZXNzYWdlOiB1aW50PDY0Pik6IHZvaWQKLy8KLy8gQG5vdGljZSBTZXRzIHRoZSBtYXhpbXVtIGJ1cm4gYW1vdW50IHBlciBtZXNzYWdlIGZvciBhIGdpdmVuIGBsb2NhbFRva2VuYC4KLy8gQGRldiBCdXJucyB3aXRoIGFtb3VudHMgZXhjZWVkaW5nIGBidXJuTGltaXRQZXJNZXNzYWdlYCB3aWxsIHJldmVydC4gTWludHMgZG8gbm90Ci8vIHJlc3BlY3QgdGhpcyB2YWx1ZSwgc28gaWYgdGhpcyBsaW1pdCBpcyByZWR1Y2VkLCBwcmV2aW91c2x5IGJ1cm5lZCB0b2tlbnMgd2lsbCBzdGlsbAovLyBiZSBtaW50YWJsZS4KLy8gQHBhcmFtIGxvY2FsVG9rZW4gTG9jYWwgdG9rZW4gdG8gc2V0IHRoZSBtYXhpbXVtIGJ1cm4gYW1vdW50IHBlciBtZXNzYWdlIG9mLgovLyBAcGFyYW0gYnVybkxpbWl0UGVyTWVzc2FnZSBNYXhpbXVtIGJ1cm4gYW1vdW50IHBlciBtZXNzYWdlIHRvIHNldC4Kc2V0TWF4QnVybkFtb3VudFBlck1lc3NhZ2U6Cglwcm90byAyIDAKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6MTk3CgkvLyB0aGlzLm9ubHlUb2tlbkNvbnRyb2xsZXIoKQoJY2FsbHN1YiBvbmx5VG9rZW5Db250cm9sbGVyCgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjE5OQoJLy8gdGhpcy5idXJuTGltaXRzUGVyTWVzc2FnZShsb2NhbFRva2VuKS52YWx1ZSA9IGJ1cm5MaW1pdFBlck1lc3NhZ2UKCWZyYW1lX2RpZyAtMSAvLyBsb2NhbFRva2VuOiBBc3NldAoJaXRvYgoJZnJhbWVfZGlnIC0yIC8vIGJ1cm5MaW1pdFBlck1lc3NhZ2U6IHVpbnQ8NjQ+CglpdG9iCglib3hfcHV0CgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjIwMQoJLy8gdGhpcy5TZXRCdXJuTGltaXRQZXJNZXNzYWdlLmxvZyh7CgkvLyAJCQl0b2tlbjogbG9jYWxUb2tlbiwKCS8vIAkJCWJ1cm5MaW1pdFBlck1lc3NhZ2U6IGJ1cm5MaW1pdFBlck1lc3NhZ2UKCS8vIAkJfSkKCWJ5dGUgMHg1OTAzNGM1ZiAvLyBTZXRCdXJuTGltaXRQZXJNZXNzYWdlKHVpbnQ2NCx1aW50NjQpCglmcmFtZV9kaWcgLTEgLy8gbG9jYWxUb2tlbjogQXNzZXQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBidXJuTGltaXRQZXJNZXNzYWdlOiB1aW50PDY0PgoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBfc2V0VG9rZW5Db250cm9sbGVyKG5ld1Rva2VuQ29udHJvbGxlcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQG5vdGljZSBTZXQgdG9rZW5Db250cm9sbGVyIHRvIGBuZXdUb2tlbkNvbnRyb2xsZXJgLCBhbmQKLy8gZW1pdCBgU2V0VG9rZW5Db250cm9sbGVyYCBldmVudC4KLy8gQGRldiBuZXdUb2tlbkNvbnRyb2xsZXIgbXVzdCBiZSBub256ZXJvLgovLyBAcGFyYW0gbmV3VG9rZW5Db250cm9sbGVyIGFkZHJlc3Mgb2YgbmV3IHRva2VuIGNvbnRyb2xsZXIKX3NldFRva2VuQ29udHJvbGxlcjoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoyMTYKCS8vIGFzc2VydChuZXdUb2tlbkNvbnRyb2xsZXIgIT09IGdsb2JhbHMuemVyb0FkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gbmV3VG9rZW5Db250cm9sbGVyOiBBZGRyZXNzCglnbG9iYWwgWmVyb0FkZHJlc3MKCSE9Cglhc3NlcnQKCgkvLyBzcmMvcm9sZXMvVG9rZW5Db250cm9sbGVyLmFsZ28udHM6MjE4CgkvLyB0aGlzLl90b2tlbkNvbnRyb2xsZXIudmFsdWUgPSBuZXdUb2tlbkNvbnRyb2xsZXIKCWJ5dGUgMHg1Zjc0NmY2YjY1NmU0MzZmNmU3NDcyNmY2YzZjNjU3MiAvLyAiX3Rva2VuQ29udHJvbGxlciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdUb2tlbkNvbnRyb2xsZXI6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjIyMAoJLy8gdGhpcy5TZXRUb2tlbkNvbnRyb2xsZXIubG9nKHsKCS8vIAkJCXRva2VuQ29udHJvbGxlcjogbmV3VG9rZW5Db250cm9sbGVyCgkvLyAJCX0pCglieXRlIDB4YTk0NzM5NDAgLy8gU2V0VG9rZW5Db250cm9sbGVyKGFkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gbmV3VG9rZW5Db250cm9sbGVyOiBBZGRyZXNzCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBfZ2V0TG9jYWxUb2tlbihyZW1vdGVEb21haW46IHVpbnQ8MzI+LCByZW1vdGVUb2tlbjogYnl0ZXMzMik6IEFzc2V0Ci8vCi8vIEBub3RpY2UgR2V0IHRoZSBlbmFibGVkIGxvY2FsIHRva2VuIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gcmVtb3RlIGRvbWFpbiBhbmQgdG9rZW4uCi8vIEBwYXJhbSByZW1vdGVEb21haW4gUmVtb3RlIGRvbWFpbgovLyBAcGFyYW0gcmVtb3RlVG9rZW4gUmVtb3RlIHRva2VuCi8vIEByZXR1cm4gTG9jYWwgYXNzZXQgaWQKX2dldExvY2FsVG9rZW46Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoyMzUKCS8vIF9yZW1vdGVUb2tlbnNLZXk6IGJ5dGVzMzIgPSB0aGlzLl9oYXNoUmVtb3RlRG9tYWluQW5kVG9rZW4oCgkvLyAJCQlyZW1vdGVEb21haW4sCgkvLyAJCQlyZW1vdGVUb2tlbgoJLy8gCQkpCglmcmFtZV9kaWcgLTIgLy8gcmVtb3RlVG9rZW46IGJ5dGVzMzIKCWZyYW1lX2RpZyAtMSAvLyByZW1vdGVEb21haW46IHVpbnQ8MzI+CgljYWxsc3ViIF9oYXNoUmVtb3RlRG9tYWluQW5kVG9rZW4KCWZyYW1lX2J1cnkgMCAvLyBfcmVtb3RlVG9rZW5zS2V5OiBieXRlczMyCgoJLy8gc3JjL3JvbGVzL1Rva2VuQ29udHJvbGxlci5hbGdvLnRzOjI0MAoJLy8gcmV0dXJuIHRoaXMucmVtb3RlVG9rZW5zVG9Mb2NhbFRva2VucyhfcmVtb3RlVG9rZW5zS2V5KS52YWx1ZTsKCWZyYW1lX2RpZyAwIC8vIF9yZW1vdGVUb2tlbnNLZXk6IGJ5dGVzMzIKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBfaGFzaFJlbW90ZURvbWFpbkFuZFRva2VuKHJlbW90ZURvbWFpbjogdWludDwzMj4sIHJlbW90ZVRva2VuOiBieXRlczMyKTogYnl0ZXMzMgovLwovLyBAbm90aWNlIGhhc2hlcyBwYWNrZWQgYF9yZW1vdGVEb21haW5gIGFuZCBgX3JlbW90ZVRva2VuYC4KLy8gQHBhcmFtIHJlbW90ZURvbWFpbiBEb21haW4gd2hlcmUgbWVzc2FnZSBvcmlnaW5hdGVkIGZyb20KLy8gQHBhcmFtIHJlbW90ZVRva2VuIEFkZHJlc3Mgb2YgcmVtb3RlIHRva2VuIGFzIGJ5dGVzMzIKLy8gQHJldHVybiBrZWNjYWsgaGFzaCBvZiBwYWNrZWQgcmVtb3RlIGRvbWFpbiBhbmQgdG9rZW4KX2hhc2hSZW1vdGVEb21haW5BbmRUb2tlbjoKCXByb3RvIDIgMQoKCS8vIHNyYy9yb2xlcy9Ub2tlbkNvbnRyb2xsZXIuYWxnby50czoyNTMKCS8vIHJldHVybiBrZWNjYWsyNTYoY29uY2F0KHJhd0J5dGVzKHJlbW90ZURvbWFpbiksIHJlbW90ZVRva2VuKSkgYXMgYnl0ZXMzMjsKCWZyYW1lX2RpZyAtMSAvLyByZW1vdGVEb21haW46IHVpbnQ8MzI+CglpdG9iCglleHRyYWN0IDQgNAoJZnJhbWVfZGlnIC0yIC8vIHJlbW90ZVRva2VuOiBieXRlczMyCgljb25jYXQKCWtlY2NhazI1NgoJcmV0c3ViCgovLyBvbmx5T3duZXIoKTogdm9pZAovLwovLyBAZGV2IFRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgb3duZXIuCm9ubHlPd25lcjoKCXByb3RvIDAgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6MjkKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuX293bmVyLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gb3duZXIoKWFkZHJlc3MKYWJpX3JvdXRlX293bmVyOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIG93bmVyKClhZGRyZXNzCgljYWxsc3ViIG93bmVyCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gb3duZXIoKTogQWRkcmVzcwovLwovLyBAZGV2IFJldHVybnMgdGhlIGFkZHJlc3Mgb2YgdGhlIGN1cnJlbnQgb3duZXIuCm93bmVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czozOQoJLy8gcmV0dXJuIHRoaXMuX293bmVyLnZhbHVlOwoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKLy8gX2NoZWNrT3duZXIoKXZvaWQKYWJpX3JvdXRlX19jaGVja093bmVyOgoJLy8gZXhlY3V0ZSBfY2hlY2tPd25lcigpdm9pZAoJY2FsbHN1YiBfY2hlY2tPd25lcgoJaW50IDEKCXJldHVybgoKLy8gX2NoZWNrT3duZXIoKTogdm9pZAovLwovLyBAZGV2IFRocm93cyBpZiB0aGUgc2VuZGVyIGlzIG5vdCB0aGUgb3duZXIuCl9jaGVja093bmVyOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo0NwoJLy8gYXNzZXJ0KHRoaXMub3duZXIoKSA9PSB0aGlzLnR4bi5zZW5kZXIpCgljYWxsc3ViIG93bmVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIHRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfdHJhbnNmZXJPd25lcnNoaXA6CgkvLyBuZXdPd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyl2b2lkCgljYWxsc3ViIHRyYW5zZmVyT3duZXJzaGlwCglpbnQgMQoJcmV0dXJuCgovLyB0cmFuc2Zlck93bmVyc2hpcChuZXdPd25lcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQGRldiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKS4KLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGJ5IHRoZSBjdXJyZW50IG93bmVyLgp0cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NTcKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo1OQoJLy8gYXNzZXJ0KG5ld093bmVyICE9IGdsb2JhbHMuemVyb0FkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gbmV3T3duZXI6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCWFzc2VydAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NjEKCS8vIHRoaXMuX3RyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyKQoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCgljYWxsc3ViIF90cmFuc2Zlck93bmVyc2hpcAoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIEBkZXYgVHJhbnNmZXJzIG93bmVyc2hpcCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYSBuZXcgYWNjb3VudCAoYG5ld093bmVyYCkuCi8vIEludGVybmFsIGZ1bmN0aW9uIHdpdGhvdXQgYWNjZXNzIHJlc3RyaWN0aW9uLgpfdHJhbnNmZXJPd25lcnNoaXA6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NzEKCS8vIG9sZE93bmVyOiBBZGRyZXNzID0gdGhpcy5fb3duZXIuZXhpc3RzID8gdGhpcy5fb3duZXIudmFsdWUgOiBnbG9iYWxzLnplcm9BZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglieiB0ZXJuYXJ5MV9mYWxzZQoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXQKCWIgdGVybmFyeTFfZW5kCgp0ZXJuYXJ5MV9mYWxzZToKCWdsb2JhbCBaZXJvQWRkcmVzcwoKdGVybmFyeTFfZW5kOgoJZnJhbWVfYnVyeSAwIC8vIG9sZE93bmVyOiBBZGRyZXNzCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo3MgoJLy8gdGhpcy5fb3duZXIudmFsdWUgPSBuZXdPd25lcgoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NzQKCS8vIHRoaXMuT3duZXJzaGlwVHJhbnNmZXJyZWQubG9nKHsgb2xkQWRkcmVzczogb2xkT3duZXIsIG5ld0FkZHJlc3M6IG5ld093bmVyIH0pCglieXRlIDB4OWEyMjNlZmIgLy8gT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKQoJZnJhbWVfZGlnIDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBwZW5kaW5nT3duZXIoKWFkZHJlc3MKYWJpX3JvdXRlX3BlbmRpbmdPd25lcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBwZW5kaW5nT3duZXIoKWFkZHJlc3MKCWNhbGxzdWIgcGVuZGluZ093bmVyCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gcGVuZGluZ093bmVyKCk6IEFkZHJlc3MKLy8KLy8gQGRldiBSZXR1cm5zIHRoZSBhZGRyZXNzIG9mIHRoZSBwZW5kaW5nIG93bmVyLgpwZW5kaW5nT3duZXI6Cglwcm90byAwIDEKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6MjgKCS8vIHJldHVybiB0aGlzLl9wZW5kaW5nT3duZXIudmFsdWU7CglieXRlIDB4NWY3MDY1NmU2NDY5NmU2NzRmNzc2ZTY1NzIgLy8gIl9wZW5kaW5nT3duZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyB0cmFuc2Zlck93bmVyc2hpcDJTKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfdHJhbnNmZXJPd25lcnNoaXAyUzoKCS8vIG5ld093bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB0cmFuc2Zlck93bmVyc2hpcDJTKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiB0cmFuc2Zlck93bmVyc2hpcDJTCglpbnQgMQoJcmV0dXJuCgovLyB0cmFuc2Zlck93bmVyc2hpcDJTKG5ld093bmVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBAZGV2IFN0YXJ0cyB0aGUgb3duZXJzaGlwIHRyYW5zZmVyIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50LiBSZXBsYWNlcyB0aGUgcGVuZGluZyB0cmFuc2ZlciBpZiB0aGVyZSBpcyBvbmUuCi8vIENhbiBvbmx5IGJlIGNhbGxlZCBieSB0aGUgY3VycmVudCBvd25lci4KLy8gRklYOiBPbmNlIG92ZXJyaWRlcyBleGlzdCwgcmVuYW1lIHRvIHRyYW5zZmVyT3duZXJzaGlwCnRyYW5zZmVyT3duZXJzaGlwMlM6Cglwcm90byAxIDAKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6MzkKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjQxCgkvLyB0aGlzLl9wZW5kaW5nT3duZXIudmFsdWUgPSBuZXdPd25lcgoJYnl0ZSAweDVmNzA2NTZlNjQ2OTZlNjc0Zjc3NmU2NTcyIC8vICJfcGVuZGluZ093bmVyIgoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo0MwoJLy8gdGhpcy5Pd25lcnNoaXBUcmFuc2ZlclN0YXJ0ZWQubG9nKHsKCS8vICAgICAgICAgICAgIHByZXZpb3VzQWRkcmVzczogdGhpcy5fb3duZXIudmFsdWUsCgkvLyAgICAgICAgICAgICBuZXdBZGRyZXNzOiBuZXdPd25lcgoJLy8gICAgICAgICB9KQoJYnl0ZSAweDI0MjRmZjJhIC8vIE93bmVyc2hpcFRyYW5zZmVyU3RhcnRlZChhZGRyZXNzLGFkZHJlc3MpCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIG5ld093bmVyOiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGFjY2VwdE93bmVyc2hpcCgpdm9pZAphYmlfcm91dGVfYWNjZXB0T3duZXJzaGlwOgoJLy8gZXhlY3V0ZSBhY2NlcHRPd25lcnNoaXAoKXZvaWQKCWNhbGxzdWIgYWNjZXB0T3duZXJzaGlwCglpbnQgMQoJcmV0dXJuCgovLyBhY2NlcHRPd25lcnNoaXAoKTogdm9pZAovLwovLyBAZGV2IFRoZSBuZXcgb3duZXIgYWNjZXB0cyB0aGUgb3duZXJzaGlwIHRyYW5zZmVyLgphY2NlcHRPd25lcnNoaXA6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo1MwoJLy8gc2VuZGVyOiBBZGRyZXNzID0gdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDAgLy8gc2VuZGVyOiBBZGRyZXNzCgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjU0CgkvLyBhc3NlcnQodGhpcy5wZW5kaW5nT3duZXIoKSA9PSBzZW5kZXIpCgljYWxsc3ViIHBlbmRpbmdPd25lcgoJZnJhbWVfZGlnIDAgLy8gc2VuZGVyOiBBZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL093bmFibGUyU3RlcC5hbGdvLnRzOjU2CgkvLyB0aGlzLl90cmFuc2Zlck93bmVyc2hpcDJTKHNlbmRlcikKCWZyYW1lX2RpZyAwIC8vIHNlbmRlcjogQWRkcmVzcwoJY2FsbHN1YiBfdHJhbnNmZXJPd25lcnNoaXAyUwoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAyUyhuZXdPd25lcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQGRldiBUcmFuc2ZlcnMgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBhY2NvdW50IChgbmV3T3duZXJgKSBhbmQgZGVsZXRlcyBhbnkgcGVuZGluZyBvd25lci4KLy8gSW50ZXJuYWwgZnVuY3Rpb24gd2l0aG91dCBhY2Nlc3MgcmVzdHJpY3Rpb24uCi8vIEZJWDogT25jZSBvdmVycmlkZXMgZXhpc3QsIHJlbmFtZSB0byBfdHJhbnNmZXJPd25lcnNoaXAKX3RyYW5zZmVyT3duZXJzaGlwMlM6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlMlN0ZXAuYWxnby50czo2NwoJLy8gb2xkT3duZXI6IEFkZHJlc3MgPSB0aGlzLl9vd25lci5leGlzdHMgPyB0aGlzLl9vd25lci52YWx1ZSA6IGdsb2JhbHMuemVyb0FkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWJ6IHRlcm5hcnkzX2ZhbHNlCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJYiB0ZXJuYXJ5M19lbmQKCnRlcm5hcnkzX2ZhbHNlOgoJZ2xvYmFsIFplcm9BZGRyZXNzCgp0ZXJuYXJ5M19lbmQ6CglmcmFtZV9idXJ5IDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6NjgKCS8vIHRoaXMuX293bmVyLnZhbHVlID0gbmV3T3duZXIKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvT3duYWJsZTJTdGVwLmFsZ28udHM6NzAKCS8vIHRoaXMuT3duZXJzaGlwVHJhbnNmZXJyZWQubG9nKHsgb2xkQWRkcmVzczogb2xkT3duZXIsIG5ld0FkZHJlc3M6IG5ld093bmVyIH0pCglieXRlIDB4OWEyMjNlZmIgLy8gT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKQoJZnJhbWVfZGlnIDAgLy8gb2xkT3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB3aGVuTm90UGF1c2VkKCk6IHZvaWQKLy8KLy8gQGRldiBNb2RpZmllciB0byBtYWtlIGEgZnVuY3Rpb24gY2FsbGFibGUgb25seSB3aGVuIHRoZSBjb250cmFjdCBpcyBub3QgcGF1c2VkLgp3aGVuTm90UGF1c2VkOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6MjUKCS8vIGFzc2VydCghdGhpcy5wYXVzZWQudmFsdWUpCglieXRlIDB4NzA2MTc1NzM2NTY0IC8vICJwYXVzZWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCWdldGJpdAoJIQoJYXNzZXJ0CglyZXRzdWIKCi8vIG9ubHlQYXVzZXIoKTogdm9pZAovLwovLyBAZGV2IHRocm93cyBpZiBjYWxsZWQgYnkgYW55IGFjY291bnQgb3RoZXIgdGhhbiB0aGUgcGF1c2VyCm9ubHlQYXVzZXI6Cglwcm90byAwIDAKCgkvLyBzcmMvcm9sZXMvUGF1c2FibGUuYWxnby50czozMgoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fcGF1c2VyLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDVmNzA2MTc1NzM2NTcyIC8vICJfcGF1c2VyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gcGF1c2VyKClhZGRyZXNzCmFiaV9yb3V0ZV9wYXVzZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgcGF1c2VyKClhZGRyZXNzCgljYWxsc3ViIHBhdXNlcgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHBhdXNlcigpOiBBZGRyZXNzCi8vCi8vIEBub3RpY2UgUmV0dXJucyBjdXJyZW50IHBhdXNlcgovLyBAcmV0dXJuIFBhdXNlcidzIGFkZHJlc3MKcGF1c2VyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6NDIKCS8vIHJldHVybiB0aGlzLl9wYXVzZXIudmFsdWU7CglieXRlIDB4NWY3MDYxNzU3MzY1NzIgLy8gIl9wYXVzZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBwYXVzZSgpdm9pZAphYmlfcm91dGVfcGF1c2U6CgkvLyBleGVjdXRlIHBhdXNlKCl2b2lkCgljYWxsc3ViIHBhdXNlCglpbnQgMQoJcmV0dXJuCgovLyBwYXVzZSgpOiB2b2lkCi8vCi8vIEBkZXYgY2FsbGVkIGJ5IHRoZSBvd25lciB0byBwYXVzZSwgdHJpZ2dlcnMgc3RvcHBlZCBzdGF0ZQpwYXVzZToKCXByb3RvIDAgMAoKCS8vIHNyYy9yb2xlcy9QYXVzYWJsZS5hbGdvLnRzOjUxCgkvLyB0aGlzLm9ubHlQYXVzZXIoKQoJY2FsbHN1YiBvbmx5UGF1c2VyCgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6NTMKCS8vIHRoaXMucGF1c2VkLnZhbHVlID0gdHJ1ZQoJYnl0ZSAweDcwNjE3NTczNjU2NCAvLyAicGF1c2VkIgoJaW50IDEKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9QYXVzYWJsZS5hbGdvLnRzOjU0CgkvLyB0aGlzLlBhdXNlLmxvZyh7fSkKCWJ5dGUgMHhjZjIzYTMwZiAvLyBQYXVzZSgpCgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB1bnBhdXNlKCl2b2lkCmFiaV9yb3V0ZV91bnBhdXNlOgoJLy8gZXhlY3V0ZSB1bnBhdXNlKCl2b2lkCgljYWxsc3ViIHVucGF1c2UKCWludCAxCglyZXR1cm4KCi8vIHVucGF1c2UoKTogdm9pZAovLwovLyBAZGV2IGNhbGxlZCBieSB0aGUgb3duZXIgdG8gdW5wYXVzZSwgcmV0dXJucyB0byBub3JtYWwgc3RhdGUKdW5wYXVzZToKCXByb3RvIDAgMAoKCS8vIHNyYy9yb2xlcy9QYXVzYWJsZS5hbGdvLnRzOjYxCgkvLyB0aGlzLm9ubHlQYXVzZXIoKQoJY2FsbHN1YiBvbmx5UGF1c2VyCgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6NjMKCS8vIHRoaXMucGF1c2VkLnZhbHVlID0gZmFsc2UKCWJ5dGUgMHg3MDYxNzU3MzY1NjQgLy8gInBhdXNlZCIKCWludCAwCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvUGF1c2FibGUuYWxnby50czo2NAoJLy8gdGhpcy5VbnBhdXNlLmxvZyh7fSkKCWJ5dGUgMHhiMTYzZWUwYiAvLyBVbnBhdXNlKCkKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHVwZGF0ZVBhdXNlcihhZGRyZXNzKXZvaWQKYWJpX3JvdXRlX3VwZGF0ZVBhdXNlcjoKCS8vIF9uZXdQYXVzZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHVwZGF0ZVBhdXNlcihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgdXBkYXRlUGF1c2VyCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGVQYXVzZXIoX25ld1BhdXNlcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQGRldiB1cGRhdGUgdGhlIHBhdXNlciByb2xlCnVwZGF0ZVBhdXNlcjoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9QYXVzYWJsZS5hbGdvLnRzOjcxCgkvLyB0aGlzLm9ubHlQYXVzZXIoKQoJY2FsbHN1YiBvbmx5UGF1c2VyCgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6NzMKCS8vIGFzc2VydChfbmV3UGF1c2VyICE9IGdsb2JhbHMuemVyb0FkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gX25ld1BhdXNlcjogQWRkcmVzcwoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL1BhdXNhYmxlLmFsZ28udHM6NzQKCS8vIHRoaXMuX3BhdXNlci52YWx1ZSA9IF9uZXdQYXVzZXIKCWJ5dGUgMHg1ZjcwNjE3NTczNjU3MiAvLyAiX3BhdXNlciIKCWZyYW1lX2RpZyAtMSAvLyBfbmV3UGF1c2VyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9yb2xlcy9QYXVzYWJsZS5hbGdvLnRzOjc1CgkvLyB0aGlzLlBhdXNlckNoYW5nZWQubG9nKHsgbmV3QWRkcmVzczogdGhpcy5fcGF1c2VyLnZhbHVlIH0pCglieXRlIDB4Y2M0MDkyM2MgLy8gUGF1c2VyQ2hhbmdlZChhZGRyZXNzKQoJYnl0ZSAweDVmNzA2MTc1NzM2NTcyIC8vICJfcGF1c2VyIgoJYXBwX2dsb2JhbF9nZXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGRlcGxveShhZGRyZXNzKXZvaWQKYWJpX3JvdXRlX2RlcGxveToKCS8vIF90b2tlbkNvbnRyb2xsZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGRlcGxveShhZGRyZXNzKXZvaWQKCWNhbGxzdWIgZGVwbG95CglpbnQgMQoJcmV0dXJuCgovLyBkZXBsb3koX3Rva2VuQ29udHJvbGxlcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQHBhcmFtIF90b2tlbkNvbnRyb2xsZXIgVG9rZW4gY29udHJvbGxlciBhZGRyZXNzCmRlcGxveToKCXByb3RvIDEgMAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjQyCgkvLyB0aGlzLl90cmFuc2Zlck93bmVyc2hpcCh0aGlzLnR4bi5zZW5kZXIpCgl0eG4gU2VuZGVyCgljYWxsc3ViIF90cmFuc2Zlck93bmVyc2hpcAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjQ1CgkvLyB0aGlzLl9zZXRUb2tlbkNvbnRyb2xsZXIoX3Rva2VuQ29udHJvbGxlcikKCWZyYW1lX2RpZyAtMSAvLyBfdG9rZW5Db250cm9sbGVyOiBBZGRyZXNzCgljYWxsc3ViIF9zZXRUb2tlbkNvbnRyb2xsZXIKCXJldHN1YgoKLy8gb25seUxvY2FsVG9rZW5NZXNzZW5nZXIoKTogdm9pZAovLwovLyBAbm90aWNlIE9ubHkgYWNjZXB0IG1lc3NhZ2VzIGZyb20gdGhlIHJlZ2lzdGVyZWQgbWVzc2FnZSB0cmFuc21pdHRlciBvbiBsb2NhbCBkb21haW4Kb25seUxvY2FsVG9rZW5NZXNzZW5nZXI6Cglwcm90byAwIDAKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czo1NQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5sb2NhbFRva2VuTWVzc2VuZ2VyLnZhbHVlLmFkZHJlc3MpCgl0eG4gU2VuZGVyCglieXRlIDB4NmM2ZjYzNjE2YzU0NmY2YjY1NmU0ZDY1NzM3MzY1NmU2NzY1NzIgLy8gImxvY2FsVG9rZW5NZXNzZW5nZXIiCglhcHBfZ2xvYmFsX2dldAoJYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwoJcG9wCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIG1pbnQodWludDMyLGJ5dGVbMzJdLGFkZHJlc3MsdWludDY0KXVpbnQ2NAphYmlfcm91dGVfbWludDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyB0bzogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGJ1cm5Ub2tlbjogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBzb3VyY2VEb21haW46IHVpbnQzMgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCA0Cgk9PQoJYXNzZXJ0CglidG9pCgoJLy8gZXhlY3V0ZSBtaW50KHVpbnQzMixieXRlWzMyXSxhZGRyZXNzLHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgbWludAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIG1pbnQoc291cmNlRG9tYWluOiB1aW50PDMyPiwgYnVyblRva2VuOiBieXRlczMyLCB0bzogQWRkcmVzcywgYW1vdW50OiB1aW50PDY0Pik6IEFzc2V0Ci8vCi8vIEBub3RpY2UgTWludHMgYGFtb3VudGAgb2YgbG9jYWwgdG9rZW5zIGNvcnJlc3BvbmRpbmcgdG8gdGhlCi8vIGdpdmVuIChgc291cmNlRG9tYWluYCwgYGJ1cm5Ub2tlbmApIHBhaXIsIHRvIGB0b2AgYWRkcmVzcy4KLy8gQGRldiByZXZlcnRzIGlmIHRoZSAoYHNvdXJjZURvbWFpbmAsIGBidXJuVG9rZW5gKSBwYWlyIGRvZXMgbm90Ci8vIG1hcCB0byBhIG5vbnplcm8gbG9jYWwgdG9rZW4gYWRkcmVzcy4gVGhpcyBtYXBwaW5nIGNhbiBiZSBxdWVyaWVkIHVzaW5nCi8vIGdldExvY2FsVG9rZW4oKS4KLy8gQHBhcmFtIHNvdXJjZURvbWFpbiBTb3VyY2UgZG9tYWluIHdoZXJlIGBidXJuVG9rZW5gIHdhcyBidXJuZWQuCi8vIEBwYXJhbSBidXJuVG9rZW4gQnVybmVkIHRva2VuIGFkZHJlc3MgYXMgYnl0ZXMzMi4KLy8gQHBhcmFtIHRvIEFkZHJlc3MgdG8gcmVjZWl2ZSBtaW50ZWQgdG9rZW5zLCBjb3JyZXNwb25kaW5nIHRvIGBidXJuVG9rZW5gLAovLyBvbiB0aGlzIGRvbWFpbi4KLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgb2YgdG9rZW5zIHRvIG1pbnQuIE11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsCi8vIHRvIHRoZSBtaW50ZXJBbGxvd2FuY2Ugb2YgdGhpcyBUb2tlbk1pbnRlciBmb3IgZ2l2ZW4gYF9taW50VG9rZW5gLgovLyBAcmV0dXJuIG1pbnRUb2tlbiB0b2tlbiBtaW50ZWQuCm1pbnQ6Cglwcm90byA0IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjgzCgkvLyB0aGlzLndoZW5Ob3RQYXVzZWQoKQoJY2FsbHN1YiB3aGVuTm90UGF1c2VkCgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6ODQKCS8vIHRoaXMub25seUxvY2FsVG9rZW5NZXNzZW5nZXIoKQoJY2FsbHN1YiBvbmx5TG9jYWxUb2tlbk1lc3NlbmdlcgoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjg2CgkvLyBfbWludFRva2VuOiBBc3NldCA9IHRoaXMuX2dldExvY2FsVG9rZW4oc291cmNlRG9tYWluLCBidXJuVG9rZW4pCglmcmFtZV9kaWcgLTIgLy8gYnVyblRva2VuOiBieXRlczMyCglmcmFtZV9kaWcgLTEgLy8gc291cmNlRG9tYWluOiB1aW50PDMyPgoJY2FsbHN1YiBfZ2V0TG9jYWxUb2tlbgoJZnJhbWVfYnVyeSAwIC8vIF9taW50VG9rZW46IEFzc2V0CgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6ODcKCS8vIGFzc2VydChfbWludFRva2VuKQoJZnJhbWVfZGlnIDAgLy8gX21pbnRUb2tlbjogQXNzZXQKCWFzc2VydAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjkwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAJCQl4ZmVyQXNzZXQ6IF9taW50VG9rZW4sCgkvLyAJCQlhc3NldFJlY2VpdmVyOiB0bywKCS8vIAkJCWFzc2V0QW1vdW50OiBhbW91bnQKCS8vIAkJfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjkxCgkvLyB4ZmVyQXNzZXQ6IF9taW50VG9rZW4KCWZyYW1lX2RpZyAwIC8vIF9taW50VG9rZW46IEFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjkyCgkvLyBhc3NldFJlY2VpdmVyOiB0bwoJZnJhbWVfZGlnIC0zIC8vIHRvOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czo5MwoJLy8gYXNzZXRBbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC00IC8vIGFtb3VudDogdWludDw2ND4KCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6OTYKCS8vIHJldHVybiBfbWludFRva2VuOwoJZnJhbWVfZGlnIDAgLy8gX21pbnRUb2tlbjogQXNzZXQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKLy8gYnVybihhc3NldCx1aW50NjQpdm9pZAphYmlfcm91dGVfYnVybjoKCS8vIGJ1cm5BbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGJ1cm5Ub2tlbjogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgYnVybihhc3NldCx1aW50NjQpdm9pZAoJY2FsbHN1YiBidXJuCglpbnQgMQoJcmV0dXJuCgovLyBidXJuKGJ1cm5Ub2tlbjogQXNzZXQsIGJ1cm5BbW91bnQ6IHVpbnQ8NjQ+KTogdm9pZAovLwovLyBAbm90aWNlIEJ1cm4gdG9rZW5zIG93bmVkIGJ5IHRoaXMgVG9rZW5NaW50ZXIuCi8vIEBwYXJhbSBidXJuVG9rZW4gYnVybmFibGUgdG9rZW4gaWQuCi8vIEBwYXJhbSBidXJuQW1vdW50IGFtb3VudCBvZiB0b2tlbnMgdG8gYnVybi4gTXVzdCBiZQovLyA+IDAsIGFuZCA8PSBtYXhpbXVtIGJ1cm4gYW1vdW50IHBlciBtZXNzYWdlLgpidXJuOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMDkKCS8vIHRoaXMud2hlbk5vdFBhdXNlZCgpCgljYWxsc3ViIHdoZW5Ob3RQYXVzZWQKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMTAKCS8vIHRoaXMub25seUxvY2FsVG9rZW5NZXNzZW5nZXIoKQoJY2FsbHN1YiBvbmx5TG9jYWxUb2tlbk1lc3NlbmdlcgoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjExMQoJLy8gdGhpcy5vbmx5V2l0aGluQnVybkxpbWl0KGJ1cm5Ub2tlbiwgYnVybkFtb3VudCkKCWZyYW1lX2RpZyAtMiAvLyBidXJuQW1vdW50OiB1aW50PDY0PgoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5Ub2tlbjogQXNzZXQKCWNhbGxzdWIgb25seVdpdGhpbkJ1cm5MaW1pdAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjExMwoJLy8gcmVzZXJ2ZUFkZHJlc3M6IEFkZHJlc3MgPSBidXJuVG9rZW4ucmVzZXJ2ZQoJZnJhbWVfZGlnIC0xIC8vIGJ1cm5Ub2tlbjogQXNzZXQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXRSZXNlcnZlCglwb3AKCWZyYW1lX2J1cnkgMCAvLyByZXNlcnZlQWRkcmVzczogQWRkcmVzcwoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjExNgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gCQkJeGZlckFzc2V0OiBidXJuVG9rZW4sCgkvLyAJCQlhc3NldFJlY2VpdmVyOiByZXNlcnZlQWRkcmVzcywKCS8vIAkJCWFzc2V0QW1vdW50OiBidXJuQW1vdW50CgkvLyAJCX0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMTcKCS8vIHhmZXJBc3NldDogYnVyblRva2VuCglmcmFtZV9kaWcgLTEgLy8gYnVyblRva2VuOiBBc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMTgKCS8vIGFzc2V0UmVjZWl2ZXI6IHJlc2VydmVBZGRyZXNzCglmcmFtZV9kaWcgMCAvLyByZXNlcnZlQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6MTE5CgkvLyBhc3NldEFtb3VudDogYnVybkFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIGJ1cm5BbW91bnQ6IHVpbnQ8NjQ+CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBhZGRMb2NhbFRva2VuTWVzc2VuZ2VyKGFwcGxpY2F0aW9uKXZvaWQKYWJpX3JvdXRlX2FkZExvY2FsVG9rZW5NZXNzZW5nZXI6CgkvLyBuZXdMb2NhbFRva2VuTWVzc2VuZ2VyOiBhcHBsaWNhdGlvbgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXBwbGljYXRpb25zCgoJLy8gZXhlY3V0ZSBhZGRMb2NhbFRva2VuTWVzc2VuZ2VyKGFwcGxpY2F0aW9uKXZvaWQKCWNhbGxzdWIgYWRkTG9jYWxUb2tlbk1lc3NlbmdlcgoJaW50IDEKCXJldHVybgoKLy8gYWRkTG9jYWxUb2tlbk1lc3NlbmdlcihuZXdMb2NhbFRva2VuTWVzc2VuZ2VyOiBBcHBsaWNhdGlvbik6IHZvaWQKLy8KLy8gQG5vdGljZSBBZGQgVG9rZW5NZXNzZW5nZXIgZm9yIHRoZSBsb2NhbCBkb21haW4uIE9ubHkgdGhpcyBUb2tlbk1lc3NlbmdlcgovLyBoYXMgcGVybWlzc2lvbiB0byBjYWxsIG1pbnQoKSBhbmQgYnVybigpIG9uIHRoaXMgVG9rZW5NaW50ZXIuCi8vIEBkZXYgUmV2ZXJ0cyBpZiBhIFRva2VuTWVzc2VuZ2VyIGlzIGFscmVhZHkgc2V0IGZvciB0aGUgbG9jYWwgZG9tYWluLgovLyBAcGFyYW0gbmV3TG9jYWxUb2tlbk1lc3NlbmdlciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IFRva2VuTWVzc2VuZ2VyIG9uIHRoZSBsb2NhbCBkb21haW4uCmFkZExvY2FsVG9rZW5NZXNzZW5nZXI6Cglwcm90byAxIDAKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMzIKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6MTM0CgkvLyBhc3NlcnQobmV3TG9jYWxUb2tlbk1lc3NlbmdlcikKCWZyYW1lX2RpZyAtMSAvLyBuZXdMb2NhbFRva2VuTWVzc2VuZ2VyOiBBcHBsaWNhdGlvbgoJYXNzZXJ0CgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6MTM1CgkvLyBhc3NlcnQoIXRoaXMubG9jYWxUb2tlbk1lc3Nlbmdlci5leGlzdHMpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NmM2ZjYzNjE2YzU0NmY2YjY1NmU0ZDY1NzM3MzY1NmU2NzY1NzIgLy8gImxvY2FsVG9rZW5NZXNzZW5nZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMzcKCS8vIHRoaXMubG9jYWxUb2tlbk1lc3Nlbmdlci52YWx1ZSA9IG5ld0xvY2FsVG9rZW5NZXNzZW5nZXIKCWJ5dGUgMHg2YzZmNjM2MTZjNTQ2ZjZiNjU2ZTRkNjU3MzczNjU2ZTY3NjU3MiAvLyAibG9jYWxUb2tlbk1lc3NlbmdlciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdMb2NhbFRva2VuTWVzc2VuZ2VyOiBBcHBsaWNhdGlvbgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxMzkKCS8vIHRoaXMuTG9jYWxUb2tlbk1lc3NlbmdlckFkZGVkLmxvZyh7CgkvLyAJCQlsb2NhbFRva2VuTWVzc2VuZ2VyOiBuZXdMb2NhbFRva2VuTWVzc2VuZ2VyCgkvLyAJCX0pCglieXRlIDB4NWNhNzkwYjEgLy8gTG9jYWxUb2tlbk1lc3NlbmdlckFkZGVkKHVpbnQ2NCkKCWZyYW1lX2RpZyAtMSAvLyBuZXdMb2NhbFRva2VuTWVzc2VuZ2VyOiBBcHBsaWNhdGlvbgoJaXRvYgoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gcmVtb3ZlTG9jYWxUb2tlbk1lc3Nlbmdlcigpdm9pZAphYmlfcm91dGVfcmVtb3ZlTG9jYWxUb2tlbk1lc3NlbmdlcjoKCS8vIGV4ZWN1dGUgcmVtb3ZlTG9jYWxUb2tlbk1lc3Nlbmdlcigpdm9pZAoJY2FsbHN1YiByZW1vdmVMb2NhbFRva2VuTWVzc2VuZ2VyCglpbnQgMQoJcmV0dXJuCgovLyByZW1vdmVMb2NhbFRva2VuTWVzc2VuZ2VyKCk6IHZvaWQKLy8KLy8gQG5vdGljZSBSZW1vdmUgdGhlIFRva2VuTWVzc2VuZ2VyIGZvciB0aGUgbG9jYWwgZG9tYWluLgovLyBAZGV2IFJldmVydHMgaWYgdGhlIFRva2VuTWVzc2VuZ2VyIG9mIHRoZSBsb2NhbCBkb21haW4gaXMgbm90IHNldC4KcmVtb3ZlTG9jYWxUb2tlbk1lc3NlbmdlcjoKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6MTQ5CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjE1MQoJLy8gYXNzZXJ0KHRoaXMubG9jYWxUb2tlbk1lc3Nlbmdlci5leGlzdHMpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NmM2ZjYzNjE2YzU0NmY2YjY1NmU0ZDY1NzM3MzY1NmU2NzY1NzIgLy8gImxvY2FsVG9rZW5NZXNzZW5nZXIiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxNTMKCS8vIF9sb2NhbFRva2VuTWVzc2VuZ2VyQmVmb3JlUmVtb3ZhbDogQXBwbGljYXRpb24gPSB0aGlzLmxvY2FsVG9rZW5NZXNzZW5nZXIudmFsdWUKCWJ5dGUgMHg2YzZmNjM2MTZjNTQ2ZjZiNjU2ZTRkNjU3MzczNjU2ZTY3NjU3MiAvLyAibG9jYWxUb2tlbk1lc3NlbmdlciIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDAgLy8gX2xvY2FsVG9rZW5NZXNzZW5nZXJCZWZvcmVSZW1vdmFsOiBBcHBsaWNhdGlvbgoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjE1NQoJLy8gdGhpcy5sb2NhbFRva2VuTWVzc2VuZ2VyLmRlbGV0ZSgpCglieXRlIDB4NmM2ZjYzNjE2YzU0NmY2YjY1NmU0ZDY1NzM3MzY1NmU2NzY1NzIgLy8gImxvY2FsVG9rZW5NZXNzZW5nZXIiCglhcHBfZ2xvYmFsX2RlbAoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjE1NwoJLy8gdGhpcy5Mb2NhbFRva2VuTWVzc2VuZ2VyUmVtb3ZlZC5sb2coewoJLy8gCQkJbG9jYWxUb2tlbk1lc3NlbmdlcjogX2xvY2FsVG9rZW5NZXNzZW5nZXJCZWZvcmVSZW1vdmFsCgkvLyAJCX0pCglieXRlIDB4YzQ5Yjc4MjAgLy8gTG9jYWxUb2tlbk1lc3NlbmdlclJlbW92ZWQodWludDY0KQoJZnJhbWVfZGlnIDAgLy8gX2xvY2FsVG9rZW5NZXNzZW5nZXJCZWZvcmVSZW1vdmFsOiBBcHBsaWNhdGlvbgoJaXRvYgoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gc2V0VG9rZW5Db250cm9sbGVyKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfc2V0VG9rZW5Db250cm9sbGVyOgoJLy8gbmV3VG9rZW5Db250cm9sbGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRUb2tlbkNvbnRyb2xsZXIoYWRkcmVzcyl2b2lkCgljYWxsc3ViIHNldFRva2VuQ29udHJvbGxlcgoJaW50IDEKCXJldHVybgoKLy8gc2V0VG9rZW5Db250cm9sbGVyKG5ld1Rva2VuQ29udHJvbGxlcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQG5vdGljZSBTZXQgdG9rZW5Db250cm9sbGVyIHRvIGBuZXdUb2tlbkNvbnRyb2xsZXJgLCBhbmQKLy8gZW1pdCBgU2V0VG9rZW5Db250cm9sbGVyYCBldmVudC4KLy8gQGRldiBuZXdUb2tlbkNvbnRyb2xsZXIgbXVzdCBiZSBub256ZXJvLgovLyBAcGFyYW0gbmV3VG9rZW5Db250cm9sbGVyIGFkZHJlc3Mgb2YgbmV3IHRva2VuIGNvbnRyb2xsZXIKc2V0VG9rZW5Db250cm9sbGVyOgoJcHJvdG8gMSAwCgoJLy8gc3JjL1Rva2VuTWludGVyLmFsZ28udHM6MTcxCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9Ub2tlbk1pbnRlci5hbGdvLnRzOjE3MwoJLy8gdGhpcy5fc2V0VG9rZW5Db250cm9sbGVyKG5ld1Rva2VuQ29udHJvbGxlcikKCWZyYW1lX2RpZyAtMSAvLyBuZXdUb2tlbkNvbnRyb2xsZXI6IEFkZHJlc3MKCWNhbGxzdWIgX3NldFRva2VuQ29udHJvbGxlcgoJcmV0c3ViCgovLyBnZXRMb2NhbFRva2VuKHVpbnQzMixieXRlWzMyXSl1aW50NjQKYWJpX3JvdXRlX2dldExvY2FsVG9rZW46CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHJlbW90ZVRva2VuOiBieXRlWzMyXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHJlbW90ZURvbWFpbjogdWludDMyCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDQKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBleGVjdXRlIGdldExvY2FsVG9rZW4odWludDMyLGJ5dGVbMzJdKXVpbnQ2NAoJY2FsbHN1YiBnZXRMb2NhbFRva2VuCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0TG9jYWxUb2tlbihyZW1vdGVEb21haW46IHVpbnQ8MzI+LCByZW1vdGVUb2tlbjogYnl0ZXMzMik6IEFzc2V0Ci8vCi8vIEBub3RpY2UgR2V0IHRoZSBsb2NhbCB0b2tlbiBpZCBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuCi8vIHJlbW90ZSBkb21haW4gYW5kIHRva2VuLgovLyBAcGFyYW0gcmVtb3RlRG9tYWluIFJlbW90ZSBkb21haW4KLy8gQHBhcmFtIHJlbW90ZVRva2VuIFJlbW90ZSB0b2tlbgovLyBAcmV0dXJuIGxvY2FsIHRva2VuIGlkCmdldExvY2FsVG9rZW46Cglwcm90byAyIDEKCgkvLyBzcmMvVG9rZW5NaW50ZXIuYWxnby50czoxODcKCS8vIHJldHVybiB0aGlzLl9nZXRMb2NhbFRva2VuKHJlbW90ZURvbWFpbiwgcmVtb3RlVG9rZW4pOwoJZnJhbWVfZGlnIC0yIC8vIHJlbW90ZVRva2VuOiBieXRlczMyCglmcmFtZV9kaWcgLTEgLy8gcmVtb3RlRG9tYWluOiB1aW50PDMyPgoJY2FsbHN1YiBfZ2V0TG9jYWxUb2tlbgoJcmV0c3ViCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiZGVwbG95KGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9kZXBsb3kKCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJ0b2tlbkNvbnRyb2xsZXIoKWFkZHJlc3MiCgltZXRob2QgImxpbmtUb2tlblBhaXIoYXNzZXQsdWludDMyLGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgInVubGlua1Rva2VuUGFpcihhc3NldCx1aW50MzIsYnl0ZVszMl0pdm9pZCIKCW1ldGhvZCAic2V0TWF4QnVybkFtb3VudFBlck1lc3NhZ2UoYXNzZXQsdWludDY0KXZvaWQiCgltZXRob2QgIm93bmVyKClhZGRyZXNzIgoJbWV0aG9kICJfY2hlY2tPd25lcigpdm9pZCIKCW1ldGhvZCAidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJwZW5kaW5nT3duZXIoKWFkZHJlc3MiCgltZXRob2QgInRyYW5zZmVyT3duZXJzaGlwMlMoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJhY2NlcHRPd25lcnNoaXAoKXZvaWQiCgltZXRob2QgInBhdXNlcigpYWRkcmVzcyIKCW1ldGhvZCAicGF1c2UoKXZvaWQiCgltZXRob2QgInVucGF1c2UoKXZvaWQiCgltZXRob2QgInVwZGF0ZVBhdXNlcihhZGRyZXNzKXZvaWQiCgltZXRob2QgIm1pbnQodWludDMyLGJ5dGVbMzJdLGFkZHJlc3MsdWludDY0KXVpbnQ2NCIKCW1ldGhvZCAiYnVybihhc3NldCx1aW50NjQpdm9pZCIKCW1ldGhvZCAiYWRkTG9jYWxUb2tlbk1lc3NlbmdlcihhcHBsaWNhdGlvbil2b2lkIgoJbWV0aG9kICJyZW1vdmVMb2NhbFRva2VuTWVzc2VuZ2VyKCl2b2lkIgoJbWV0aG9kICJzZXRUb2tlbkNvbnRyb2xsZXIoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJnZXRMb2NhbFRva2VuKHVpbnQzMixieXRlWzMyXSl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfdG9rZW5Db250cm9sbGVyIGFiaV9yb3V0ZV9saW5rVG9rZW5QYWlyIGFiaV9yb3V0ZV91bmxpbmtUb2tlblBhaXIgYWJpX3JvdXRlX3NldE1heEJ1cm5BbW91bnRQZXJNZXNzYWdlIGFiaV9yb3V0ZV9vd25lciBhYmlfcm91dGVfX2NoZWNrT3duZXIgYWJpX3JvdXRlX3RyYW5zZmVyT3duZXJzaGlwIGFiaV9yb3V0ZV9wZW5kaW5nT3duZXIgYWJpX3JvdXRlX3RyYW5zZmVyT3duZXJzaGlwMlMgYWJpX3JvdXRlX2FjY2VwdE93bmVyc2hpcCBhYmlfcm91dGVfcGF1c2VyIGFiaV9yb3V0ZV9wYXVzZSBhYmlfcm91dGVfdW5wYXVzZSBhYmlfcm91dGVfdXBkYXRlUGF1c2VyIGFiaV9yb3V0ZV9taW50IGFiaV9yb3V0ZV9idXJuIGFiaV9yb3V0ZV9hZGRMb2NhbFRva2VuTWVzc2VuZ2VyIGFiaV9yb3V0ZV9yZW1vdmVMb2NhbFRva2VuTWVzc2VuZ2VyIGFiaV9yb3V0ZV9zZXRUb2tlbkNvbnRyb2xsZXIgYWJpX3JvdXRlX2dldExvY2FsVG9rZW4KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TokenMinter",
    "desc": "",
    "methods": [
      {
        "name": "tokenController",
        "desc": "@devReturns the address of the tokenController@returnaddress of the tokenController",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "linkTokenPair",
        "desc": "@noticeLinks a pair of local and remote tokens to be supported by this TokenMinter.@devAssociates a (`remoteToken`,`localToken`) pair by updating remoteTokensToLocalTokens mapping.Reverts if the remote token (for the given`remoteDomain`) already maps to a nonzero local token.Note:- A remote token (on a certain remote domain) can only map to one local token, but many remote tokenscan map to the same local token.- Setting a token pair does not enable the`localToken`(that requires calling setLocalTokenEnabledStatus.)",
        "args": [
          {
            "name": "localToken",
            "type": "asset"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TokenPairLinked",
            "args": [
              {
                "name": "localToken",
                "type": "uint64"
              },
              {
                "name": "remoteDomain",
                "type": "uint32"
              },
              {
                "name": "remoteToken",
                "type": "byte[32]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "unlinkTokenPair",
        "desc": "@noticeUnlinks a pair of local and remote tokens for this TokenMinter.@devRemoves link from`remoteToken`, to`localToken`for given`remoteDomain`by updating remoteTokensToLocalTokens mapping.Reverts if the remote token (for the given`remoteDomain`) already maps to the zero address.Note:- A remote token (on a certain remote domain) can only map to one local token, but many remote tokenscan map to the same local token.- Unlinking a token pair does not disable burning the`localToken`(that requires calling setMaxBurnAmountPerMessage.)",
        "args": [
          {
            "name": "localToken",
            "type": "asset"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TokenPairUnlinked",
            "args": [
              {
                "name": "localToken",
                "type": "uint64"
              },
              {
                "name": "remoteDomain",
                "type": "uint32"
              },
              {
                "name": "remoteToken",
                "type": "byte[32]"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setMaxBurnAmountPerMessage",
        "desc": "@noticeSets the maximum burn amount per message for a given`localToken`.@devBurns with amounts exceeding`burnLimitPerMessage`will revert. Mints do notrespect this value, so if this limit is reduced, previously burned tokens will stillbe mintable.",
        "args": [
          {
            "name": "localToken",
            "type": "asset",
            "desc": "Local token to set the maximum burn amount per message of."
          },
          {
            "name": "burnLimitPerMessage",
            "type": "uint64",
            "desc": "Maximum burn amount per message to set."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SetBurnLimitPerMessage",
            "args": [
              {
                "name": "token",
                "type": "uint64"
              },
              {
                "name": "burnLimitPerMessage",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "owner",
        "desc": "@devReturns the address of the current owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "_checkOwner",
        "desc": "@devThrows if the sender is not the owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "@devTransfers ownership of the application to a new account (`newOwner`).Can only be called by the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pendingOwner",
        "desc": "@devReturns the address of the pending owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership2S",
        "desc": "@devStarts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.Can only be called by the current owner.FIX: Once overrides exist, rename to transferOwnership",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "OwnershipTransferStarted",
            "args": [
              {
                "name": "previousAddress",
                "type": "address"
              },
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "acceptOwnership",
        "desc": "@devThe new owner accepts the ownership transfer.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pauser",
        "desc": "@noticeReturns current pauser@returnPauser's address",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "pause",
        "desc": "@devcalled by the owner to pause, triggers stopped state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Pause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "unpause",
        "desc": "@devcalled by the owner to unpause, returns to normal state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Unpause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "updatePauser",
        "desc": "@devupdate the pauser role",
        "args": [
          {
            "name": "_newPauser",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PauserChanged",
            "args": [
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deploy",
        "args": [
          {
            "name": "_tokenController",
            "type": "address",
            "desc": "Token controller address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "desc": "@noticeMints`amount`of local tokens corresponding to thegiven (`sourceDomain`,`burnToken`) pair, to`to`address.@devreverts if the (`sourceDomain`,`burnToken`) pair does notmap to a nonzero local token address. This mapping can be queried usinggetLocalToken().",
        "args": [
          {
            "name": "sourceDomain",
            "type": "uint32",
            "desc": "Source domain where`burnToken`was burned."
          },
          {
            "name": "burnToken",
            "type": "byte[32]",
            "desc": "Burned token address as bytes32."
          },
          {
            "name": "to",
            "type": "address",
            "desc": "Address to receive minted tokens, corresponding to`burnToken`,on this domain."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of tokens to mint. Must be less than or equalto the minterAllowance of this TokenMinter for given`_mintToken`.@returnmintToken token minted."
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "burn",
        "desc": "@noticeBurn tokens owned by this TokenMinter.",
        "args": [
          {
            "name": "burnToken",
            "type": "asset",
            "desc": "burnable token id."
          },
          {
            "name": "burnAmount",
            "type": "uint64",
            "desc": "amount of tokens to burn. Must be>0, and<= maximum burn amount per message."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLocalTokenMessenger",
        "desc": "@noticeAdd TokenMessenger for the local domain. Only this TokenMessengerhas permission to call mint() and burn() on this TokenMinter.@devReverts if a TokenMessenger is already set for the local domain.",
        "args": [
          {
            "name": "newLocalTokenMessenger",
            "type": "application",
            "desc": "The address of the new TokenMessenger on the local domain."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalTokenMessengerAdded",
            "args": [
              {
                "name": "localTokenMessenger",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "removeLocalTokenMessenger",
        "desc": "@noticeRemove the TokenMessenger for the local domain.@devReverts if the TokenMessenger of the local domain is not set.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalTokenMessengerRemoved",
            "args": [
              {
                "name": "localTokenMessenger",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "setTokenController",
        "desc": "@noticeSet tokenController to`newTokenController`, andemit`SetTokenController`event.@devnewTokenController must be nonzero.",
        "args": [
          {
            "name": "newTokenController",
            "type": "address",
            "desc": "address of new token controller"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLocalToken",
        "desc": "@noticeGet the local token id associated with the givenremote domain and token.",
        "args": [
          {
            "name": "remoteDomain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]",
            "desc": "Remote token@returnlocal token id"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "TokenPairLinked",
        "args": [
          {
            "name": "localToken",
            "type": "uint64"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "desc": ""
      },
      {
        "name": "TokenPairUnlinked",
        "args": [
          {
            "name": "localToken",
            "type": "uint64"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "desc": ""
      },
      {
        "name": "SetBurnLimitPerMessage",
        "args": [
          {
            "name": "token",
            "type": "uint64"
          },
          {
            "name": "burnLimitPerMessage",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "SetTokenController",
        "args": [
          {
            "name": "tokenController",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "oldAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "OwnershipTransferStarted",
        "args": [
          {
            "name": "previousAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Pause",
        "args": [],
        "desc": ""
      },
      {
        "name": "Unpause",
        "args": [],
        "desc": ""
      },
      {
        "name": "PauserChanged",
        "args": [
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "LocalTokenMessengerAdded",
        "args": [
          {
            "name": "localTokenMessenger",
            "type": "uint64"
          }
        ],
        "desc": ""
      },
      {
        "name": "LocalTokenMessengerRemoved",
        "args": [
          {
            "name": "localTokenMessenger",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}