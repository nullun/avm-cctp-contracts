{
  "hints": {
    "tokenController()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkTokenPair(asset,uint32,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unlinkTokenPair(asset,uint32,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setMaxBurnAmountPerMessage(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "_checkOwner()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pendingOwner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership2S(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptOwnership()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauser()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePauser(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "mint(uint32,byte[32],address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLocalTokenMessenger(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLocalTokenMessenger()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTokenController(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLocalToken(uint32,byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_tokenController": {
          "type": "bytes",
          "key": "_tokenController"
        },
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pendingOwner": {
          "type": "bytes",
          "key": "_pendingOwner"
        },
        "_pauser": {
          "type": "bytes",
          "key": "_pauser"
        },
        "paused": {
          "type": "bytes",
          "key": "paused"
        },
        "localTokenMessenger": {
          "type": "uint64",
          "key": "localTokenMessenger"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TokenMinter",
    "desc": "",
    "methods": [
      {
        "name": "tokenController",
        "desc": "@devReturns the address of the tokenController@returnaddress of the tokenController",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "linkTokenPair",
        "desc": "@noticeLinks a pair of local and remote tokens to be supported by this TokenMinter.@devAssociates a (`remoteToken`,`localToken`) pair by updating remoteTokensToLocalTokens mapping.Reverts if the remote token (for the given`remoteDomain`) already maps to a nonzero local token.Note:- A remote token (on a certain remote domain) can only map to one local token, but many remote tokenscan map to the same local token.- Setting a token pair does not enable the`localToken`(that requires calling setLocalTokenEnabledStatus.)",
        "args": [
          {
            "name": "localToken",
            "type": "asset"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TokenPairLinked",
            "args": [
              {
                "name": "localToken",
                "type": "uint64",
                "desc": "Local token to support"
              },
              {
                "name": "remoteDomain",
                "type": "uint32",
                "desc": "Remote domain"
              },
              {
                "name": "remoteToken",
                "type": "byte[32]",
                "desc": "Token on `remoteDomain` corresponding to `localToken`"
              }
            ],
            "desc": "Emitted when a token pair is linked"
          }
        ]
      },
      {
        "name": "unlinkTokenPair",
        "desc": "@noticeUnlinks a pair of local and remote tokens for this TokenMinter.@devRemoves link from`remoteToken`, to`localToken`for given`remoteDomain`by updating remoteTokensToLocalTokens mapping.Reverts if the remote token (for the given`remoteDomain`) already maps to the zero address.Note:- A remote token (on a certain remote domain) can only map to one local token, but many remote tokenscan map to the same local token.- Unlinking a token pair does not disable burning the`localToken`(that requires calling setMaxBurnAmountPerMessage.)",
        "args": [
          {
            "name": "localToken",
            "type": "asset"
          },
          {
            "name": "remoteDomain",
            "type": "uint32"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "TokenPairUnlinked",
            "args": [
              {
                "name": "localToken",
                "type": "uint64",
                "desc": "Local token id"
              },
              {
                "name": "remoteDomain",
                "type": "uint32",
                "desc": "Remote domain"
              },
              {
                "name": "remoteToken",
                "type": "byte[32]",
                "desc": "Token on `remoteDomain` unlinked from `localToken`"
              }
            ],
            "desc": "Emitted when a token pair is unlinked"
          }
        ]
      },
      {
        "name": "setMaxBurnAmountPerMessage",
        "desc": "@noticeSets the maximum burn amount per message for a given`localToken`.@devBurns with amounts exceeding`burnLimitPerMessage`will revert. Mints do notrespect this value, so if this limit is reduced, previously burned tokens will stillbe mintable.",
        "args": [
          {
            "name": "localToken",
            "type": "asset",
            "desc": "Local token to set the maximum burn amount per message of."
          },
          {
            "name": "burnLimitPerMessage",
            "type": "uint64",
            "desc": "Maximum burn amount per message to set."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SetBurnLimitPerMessage",
            "args": [
              {
                "name": "token",
                "type": "uint64",
                "desc": "Local token id"
              },
              {
                "name": "burnLimitPerMessage",
                "type": "uint64",
                "desc": "Burn limit per message for `token`"
              }
            ],
            "desc": "Emitted when a burn limit per message is set for a particular token"
          }
        ]
      },
      {
        "name": "owner",
        "desc": "@devReturns the address of the current owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "_checkOwner",
        "desc": "@devThrows if the sender is not the owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "@devTransfers ownership of the application to a new account (`newOwner`).Can only be called by the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pendingOwner",
        "desc": "@devReturns the address of the pending owner.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership2S",
        "desc": "@devStarts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.Can only be called by the current owner.FIX: Once overrides exist, rename to transferOwnership",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "OwnershipTransferStarted",
            "args": [
              {
                "name": "previousAddress",
                "type": "address"
              },
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "acceptOwnership",
        "desc": "@devThe new owner accepts the ownership transfer.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pauser",
        "desc": "@noticeReturns current pauser@returnPauser's address",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "pause",
        "desc": "@devcalled by the owner to pause, triggers stopped state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Pause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "unpause",
        "desc": "@devcalled by the owner to unpause, returns to normal state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Unpause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "updatePauser",
        "desc": "@devupdate the pauser role",
        "args": [
          {
            "name": "_newPauser",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PauserChanged",
            "args": [
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deploy",
        "args": [
          {
            "name": "_tokenController",
            "type": "address",
            "desc": "Token controller address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "desc": "@noticeMints`amount`of local tokens corresponding to thegiven (`sourceDomain`,`burnToken`) pair, to`to`address.@devreverts if the (`sourceDomain`,`burnToken`) pair does notmap to a nonzero local token address. This mapping can be queried usinggetLocalToken().",
        "args": [
          {
            "name": "sourceDomain",
            "type": "uint32",
            "desc": "Source domain where`burnToken`was burned."
          },
          {
            "name": "burnToken",
            "type": "byte[32]",
            "desc": "Burned token address as bytes32."
          },
          {
            "name": "to",
            "type": "address",
            "desc": "Address to receive minted tokens, corresponding to`burnToken`,on this domain."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of tokens to mint. Must be less than or equalto the minterAllowance of this TokenMinter for given`_mintToken`.@returnmintToken token minted."
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "burn",
        "desc": "@noticeBurn tokens owned by this TokenMinter.",
        "args": [
          {
            "name": "burnToken",
            "type": "asset",
            "desc": "burnable token id."
          },
          {
            "name": "burnAmount",
            "type": "uint64",
            "desc": "amount of tokens to burn. Must be>0, and<= maximum burn amount per message."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLocalTokenMessenger",
        "desc": "@noticeAdd TokenMessenger for the local domain. Only this TokenMessengerhas permission to call mint() and burn() on this TokenMinter.@devReverts if a TokenMessenger is already set for the local domain.",
        "args": [
          {
            "name": "newLocalTokenMessenger",
            "type": "application",
            "desc": "The address of the new TokenMessenger on the local domain."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalTokenMessengerAdded",
            "args": [
              {
                "name": "localTokenMessenger",
                "type": "uint64",
                "desc": "Address of local TokenMessenger"
              }
            ],
            "desc": "Emitted when a local TokenMessenger is added"
          }
        ]
      },
      {
        "name": "removeLocalTokenMessenger",
        "desc": "@noticeRemove the TokenMessenger for the local domain.@devReverts if the TokenMessenger of the local domain is not set.",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "LocalTokenMessengerRemoved",
            "args": [
              {
                "name": "localTokenMessenger",
                "type": "uint64",
                "desc": "Address of local TokenMessenger"
              }
            ],
            "desc": "Emitted when a local TokenMessenger is removed"
          }
        ]
      },
      {
        "name": "setTokenController",
        "desc": "@noticeSet tokenController to`newTokenController`, andemit`SetTokenController`event.@devnewTokenController must be nonzero.",
        "args": [
          {
            "name": "newTokenController",
            "type": "address",
            "desc": "address of new token controller"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getLocalToken",
        "desc": "@noticeGet the local token id associated with the givenremote domain and token.",
        "args": [
          {
            "name": "remoteDomain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]",
            "desc": "Remote token@returnlocal token id"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "TokenPairLinked",
        "args": [
          {
            "name": "localToken",
            "type": "uint64",
            "desc": "Local token to support"
          },
          {
            "name": "remoteDomain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]",
            "desc": "Token on `remoteDomain` corresponding to `localToken`"
          }
        ],
        "desc": "Emitted when a token pair is linked"
      },
      {
        "name": "TokenPairUnlinked",
        "args": [
          {
            "name": "localToken",
            "type": "uint64",
            "desc": "Local token id"
          },
          {
            "name": "remoteDomain",
            "type": "uint32",
            "desc": "Remote domain"
          },
          {
            "name": "remoteToken",
            "type": "byte[32]",
            "desc": "Token on `remoteDomain` unlinked from `localToken`"
          }
        ],
        "desc": "Emitted when a token pair is unlinked"
      },
      {
        "name": "SetBurnLimitPerMessage",
        "args": [
          {
            "name": "token",
            "type": "uint64",
            "desc": "Local token id"
          },
          {
            "name": "burnLimitPerMessage",
            "type": "uint64",
            "desc": "Burn limit per message for `token`"
          }
        ],
        "desc": "Emitted when a burn limit per message is set for a particular token"
      },
      {
        "name": "SetTokenController",
        "args": [
          {
            "name": "tokenController",
            "type": "address",
            "desc": "Token controller address set"
          }
        ],
        "desc": "Emitted when token controller is set"
      },
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "oldAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "OwnershipTransferStarted",
        "args": [
          {
            "name": "previousAddress",
            "type": "address"
          },
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Pause",
        "args": [],
        "desc": ""
      },
      {
        "name": "Unpause",
        "args": [],
        "desc": ""
      },
      {
        "name": "PauserChanged",
        "args": [
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "LocalTokenMessengerAdded",
        "args": [
          {
            "name": "localTokenMessenger",
            "type": "uint64",
            "desc": "Address of local TokenMessenger"
          }
        ],
        "desc": "Emitted when a local TokenMessenger is added"
      },
      {
        "name": "LocalTokenMessengerRemoved",
        "args": [
          {
            "name": "localTokenMessenger",
            "type": "uint64",
            "desc": "Address of local TokenMessenger"
          }
        ],
        "desc": "Emitted when a local TokenMessenger is removed"
      }
    ]
  }
}